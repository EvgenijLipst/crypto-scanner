#!/usr/bin/env node

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ coin_data —Ç–∞–±–ª–∏—Ü—É
require('ts-node').register({
  project: './tsconfig.json'
});

const { Database } = require('./src/database');
const { CoinGeckoAPI } = require('./src/coingecko');
const { TokenAnalyzer } = require('./src/token-analyzer');
const { JupiterAPI } = require('./src/jupiter');

async function testCoinDataSave() {
  try {
    console.log('üß™ Testing coin_data save functionality...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.DATABASE_URL) {
      console.error('‚ùå DATABASE_URL environment variable is missing');
      process.exit(1);
    }
    
    if (!process.env.COINGECKO_API_KEY) {
      console.error('‚ùå COINGECKO_API_KEY environment variable is missing');
      process.exit(1);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    const db = new Database(process.env.DATABASE_URL);
    const coingecko = new CoinGeckoAPI(process.env.COINGECKO_API_KEY);
    const jupiter = new JupiterAPI();
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
    const analysisConfig = {
      minTokenAgeDays: 14,
      minLiquidityUsd: 10000,
      maxFdvUsd: 5000000,
      minVolumeSpike: 3,
      maxRsiOversold: 35,
      maxPriceImpactPercent: 3,
      priceImpactTestAmount: 10
    };
    
    const tokenAnalyzer = new TokenAnalyzer(coingecko, jupiter, db, analysisConfig);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üîß Initializing database...');
    await db.initialize();
    console.log('‚úÖ Database initialized');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ coin_data
    console.log('üìä Checking current coin_data records...');
    const currentCount = await db.pool.query('SELECT COUNT(*) as count FROM coin_data');
    console.log(`üìä Current coin_data records: ${currentCount.rows[0].count}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã (—Ç–æ–ª—å–∫–æ 10 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API)
    console.log('üîÑ Fetching test tokens from CoinGecko...');
    const testTokens = await coingecko.getTopSolanaTokens(10);
    console.log(`‚úÖ Fetched ${testTokens.length} test tokens`);
    
    if (testTokens.length === 0) {
      console.log('‚ùå No tokens received from CoinGecko');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤
    console.log('üìã Sample tokens:');
    testTokens.slice(0, 3).forEach((token, i) => {
      console.log(`${i + 1}. ${token.symbol} (${token.coinId}) - mint: "${token.mint}" - price: $${token.priceUsd}`);
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ Saving tokens to coin_data table...');
    await tokenAnalyzer.saveTokensToCoinData(testTokens);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    console.log('üìä Checking coin_data records after save...');
    const newCount = await db.pool.query('SELECT COUNT(*) as count FROM coin_data');
    console.log(`üìä New coin_data records: ${newCount.rows[0].count}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    console.log('üìã Latest coin_data records:');
    const latestRecords = await db.pool.query(`
      SELECT coin_id, symbol, name, mint, price, volume, timestamp 
      FROM coin_data 
      ORDER BY timestamp DESC 
      LIMIT 5
    `);
    
    latestRecords.rows.forEach((record, i) => {
      console.log(`${i + 1}. ${record.symbol} (${record.coin_id}) - mint: "${record.mint}" - price: $${record.price}`);
    });
    
    console.log('‚úÖ Test completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    if (error instanceof Error) {
      console.error('‚ùå Error details:', error.message);
      console.error('‚ùå Error stack:', error.stack);
    }
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCoinDataSave(); 