"use strict";
// database.ts - –†–∞–±–æ—Ç–∞ —Å PostgreSQL
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = void 0;
const pg_1 = require("pg");
const utils_1 = require("./utils");
class Database {
    constructor(connectionString) {
        (0, utils_1.log)(`Connecting to database: ${connectionString.replace(/\/\/.*:.*@/, '//[credentials]@')}`);
        // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
        const isProduction = connectionString.includes('railway') || connectionString.includes('.proxy.rlwy.net');
        this.pool = new pg_1.Pool({
            connectionString,
            ssl: isProduction ? {
                rejectUnauthorized: false
            } : false,
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            max: 5,
            idleTimeoutMillis: 20000,
            connectionTimeoutMillis: 5000,
            keepAlive: true,
            keepAliveInitialDelayMillis: 10000,
        });
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.pool.on('error', (err) => {
            (0, utils_1.log)('Database pool error:', 'ERROR');
            (0, utils_1.log)(String(err), 'ERROR');
        });
        this.pool.on('connect', () => {
            (0, utils_1.log)('Database client connected');
        });
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
     */
    async initialize() {
        let retries = 3;
        while (retries > 0) {
            try {
                (0, utils_1.log)(`Database connection attempt (${4 - retries}/3)...`);
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await new Promise(resolve => setTimeout(resolve, 1000));
                const client = await this.pool.connect();
                try {
                    (0, utils_1.log)('Connected to database, creating tables...');
                    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (signals —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                    (0, utils_1.log)('Creating pools table...');
                    await client.query(`
            CREATE TABLE IF NOT EXISTS pools (
              mint            TEXT PRIMARY KEY,
              first_seen_ts   BIGINT,
              liq_usd         NUMERIC,
              fdv_usd         NUMERIC
            );
          `);
                    (0, utils_1.log)('Creating ohlcv table...');
                    await client.query(`
            CREATE TABLE IF NOT EXISTS ohlcv (
              mint TEXT,
              ts   BIGINT,
              o NUMERIC, h NUMERIC, l NUMERIC, c NUMERIC, v NUMERIC,
              PRIMARY KEY (mint, ts)
            );
          `);
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É signals —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                    (0, utils_1.log)('Recreating signals table with correct structure...');
                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    await client.query(`DROP TABLE IF EXISTS signals;`);
                    await client.query(`
            CREATE TABLE signals (
              id  SERIAL PRIMARY KEY,
              mint TEXT,
              signal_ts BIGINT,
              ema_cross BOOLEAN,
              vol_spike NUMERIC,
              rsi       NUMERIC,
              notified  BOOLEAN DEFAULT FALSE
            );
          `);
                    (0, utils_1.log)('Successfully recreated signals table with mint field');
                    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                    (0, utils_1.log)('Creating indexes...');
                    await client.query(`CREATE INDEX IF NOT EXISTS idx_pools_first_seen ON pools (first_seen_ts);`);
                    await client.query(`CREATE INDEX IF NOT EXISTS idx_ohlcv_mint_ts ON ohlcv (mint, ts DESC);`);
                    await client.query(`CREATE INDEX IF NOT EXISTS idx_signals_notified ON signals (notified, signal_ts);`);
                    (0, utils_1.log)('Database initialized successfully');
                    return; // –£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏, –≤—ã—Ö–æ–¥–∏–º
                }
                finally {
                    client.release();
                }
            }
            catch (error) {
                retries--;
                (0, utils_1.log)(`Database initialization error (attempts left: ${retries}):`, 'ERROR');
                (0, utils_1.log)(String(error), 'ERROR');
                if (retries === 0) {
                    throw error;
                }
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }
    }
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—É–ª
     */
    async upsertPool(mint, firstSeenTs, liqUsd, fdvUsd) {
        await this.pool.query(`
      INSERT INTO pools(mint, first_seen_ts, liq_usd, fdv_usd)
      VALUES($1, $2, $3, $4)
      ON CONFLICT(mint) DO UPDATE SET
        liq_usd = COALESCE(EXCLUDED.liq_usd, pools.liq_usd),
        fdv_usd = COALESCE(EXCLUDED.fdv_usd, pools.fdv_usd)
    `, [mint, firstSeenTs, liqUsd, fdvUsd]);
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ
     */
    async getPool(mint) {
        try {
            (0, utils_1.log)(`üîç Getting pool info for mint: ${mint}`);
            const sql = 'SELECT * FROM pools WHERE mint = $1';
            (0, utils_1.log)(`üìã SQL: ${sql} with params: [${mint}]`);
            const res = await this.pool.query(sql, [mint]);
            (0, utils_1.log)(`üìã getPool returned ${res.rows.length} rows`);
            if (res.rows.length > 0) {
                (0, utils_1.log)(`üìã Pool data: ${JSON.stringify(res.rows[0])}`);
            }
            return res.rows[0] || null;
        }
        catch (error) {
            (0, utils_1.log)(`‚ùå Error in getPool: ${error}`, 'ERROR');
            (0, utils_1.log)(`‚ùå Error stack: ${error instanceof Error ? error.stack : 'No stack'}`, 'ERROR');
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–∏–Ω—Ç—ã (—Å—Ç–∞—Ä—à–µ 14 –¥–Ω–µ–π)
     */
    async getOldPools() {
        const fourteenDaysAgo = Math.floor(Date.now() / 1000) - (14 * 24 * 60 * 60);
        const res = await this.pool.query('SELECT * FROM pools WHERE first_seen_ts <= $1', [fourteenDaysAgo]);
        return res.rows;
    }
    /**
     * –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å OHLCV –¥–∞–Ω–Ω—ã–µ
     */
    async ingestSwap(mint, price, volUsd, tsSec) {
        const bucket = (0, utils_1.bucketTs)(tsSec);
        await this.pool.query(`
      INSERT INTO ohlcv (mint, ts, o,h,l,c,v)
      VALUES ($1,$2,$3,$3,$3,$3,$4)
      ON CONFLICT (mint, ts) DO UPDATE
        SET h = GREATEST(ohlcv.h, EXCLUDED.h),
            l = LEAST(ohlcv.l, EXCLUDED.l),
            c = EXCLUDED.c,
            v = ohlcv.v + EXCLUDED.v
    `, [mint, bucket, price, volUsd]);
    }
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å OHLCV –¥–∞–Ω–Ω—ã–µ (–∞–ª–∏–∞—Å –¥–ª—è ingestSwap –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    async updateOHLCV(mint, price, volumeUsd, timestamp) {
        return this.ingestSwap(mint, price, volumeUsd, timestamp);
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
     */
    async getCandles(mint, limit = 40) {
        const res = await this.pool.query(`
      SELECT * FROM ohlcv
      WHERE mint = $1
      ORDER BY ts DESC
      LIMIT $2
    `, [mint, limit]);
        return res.rows.reverse(); // oldest ‚Üí latest –¥–ª—è talib
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å OHLCV –¥–∞–Ω–Ω—ã–µ (–∞–ª–∏–∞—Å –¥–ª—è getCandles)
     */
    async getOHLCV(mint, limit = 40) {
        return this.getCandles(mint, limit);
    }
    /**
     * –°–æ–∑–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª
     */
    async createSignal(mint, emaCross, volSpike, rsi) {
        try {
            (0, utils_1.log)(`üîç Creating signal for mint: ${mint}`);
            const currentTimestamp = Math.floor(Date.now() / 1000);
            const sql = `
        INSERT INTO signals(mint, signal_ts, ema_cross, vol_spike, rsi, notified)
        VALUES($1, $2, $3, $4, $5, false)
      `;
            (0, utils_1.log)(`üìã SQL: ${sql}`);
            (0, utils_1.log)(`üìã Params: [${mint}, ${currentTimestamp}, ${emaCross}, ${volSpike}, ${rsi}]`);
            await this.pool.query(sql, [mint, currentTimestamp, emaCross, volSpike, rsi]);
            (0, utils_1.log)(`‚úÖ Successfully created signal for ${mint}`);
        }
        catch (error) {
            (0, utils_1.log)(`‚ùå Error in createSignal: ${error}`, 'ERROR');
            (0, utils_1.log)(`‚ùå Error stack: ${error instanceof Error ? error.stack : 'No stack'}`, 'ERROR');
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
     */
    async getUnnotifiedSignals() {
        try {
            (0, utils_1.log)('üîç Executing getUnnotifiedSignals query...');
            const sql = `
        SELECT id, mint, signal_ts, ema_cross, vol_spike, rsi, notified
        FROM signals 
        WHERE notified = false
        ORDER BY signal_ts ASC
      `;
            (0, utils_1.log)(`üìã SQL: ${sql}`);
            const res = await this.pool.query(sql);
            (0, utils_1.log)(`üìã getUnnotifiedSignals returned ${res.rows.length} rows`);
            if (res.rows.length > 0) {
                (0, utils_1.log)(`üìã First signal: ${JSON.stringify(res.rows[0])}`);
            }
            return res.rows;
        }
        catch (error) {
            (0, utils_1.log)(`‚ùå Error in getUnnotifiedSignals: ${error}`, 'ERROR');
            (0, utils_1.log)(`‚ùå Error stack: ${error instanceof Error ? error.stack : 'No stack'}`, 'ERROR');
            throw error;
        }
    }
    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
     */
    async markSignalNotified(signalId) {
        try {
            (0, utils_1.log)(`üîç Marking signal ${signalId} as notified...`);
            const sql = 'UPDATE signals SET notified = true WHERE id = $1';
            (0, utils_1.log)(`üìã SQL: ${sql} with params: [${signalId}]`);
            await this.pool.query(sql, [signalId]);
            (0, utils_1.log)(`‚úÖ Successfully marked signal ${signalId} as notified`);
        }
        catch (error) {
            (0, utils_1.log)(`‚ùå Error in markSignalNotified: ${error}`, 'ERROR');
            (0, utils_1.log)(`‚ùå Error stack: ${error instanceof Error ? error.stack : 'No stack'}`, 'ERROR');
            throw error;
        }
    }
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async cleanup() {
        const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        const oneDayAgoTs = Math.floor(oneDayAgo.getTime() / 1000);
        await this.pool.query('DELETE FROM ohlcv WHERE ts < $1', [oneDayAgoTs]);
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤) - –∏—Å–ø–æ–ª—å–∑—É–µ–º signal_ts, –∞ –Ω–µ created_at
        await this.pool.query('DELETE FROM signals WHERE signal_ts < $1', [oneDayAgoTs]);
        (0, utils_1.log)('Database cleanup completed');
    }
    /**
     * –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    async close() {
        await this.pool.end();
    }
}
exports.Database = Database;
