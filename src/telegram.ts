// telegram.ts - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram

import fetch from 'cross-fetch';
import { SignalRow } from './types';
import { formatNumber, escapeMarkdown, createBirdeyeLink, log } from './utils';

export class TelegramBot {
  private token: string;
  private chatId: string;
  private baseUrl: string;

  constructor(token: string, chatId: string) {
    this.token = token;
    this.chatId = chatId;
    this.baseUrl = `https://api.telegram.org/bot${token}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   */
  async sendMessage(text: string, parseMode: 'Markdown' | 'MarkdownV2' | 'HTML' = 'Markdown'): Promise<boolean> {
    try {
      const url = `${this.baseUrl}/sendMessage`;
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.chatId,
          text,
          parse_mode: parseMode,
          disable_web_page_preview: true,
        }),
      });

      if (!response.ok) {
        const error = await response.text();
        log(`Telegram API error: ${response.status} ${error}`, 'ERROR');
        return false;
      }

      log('Telegram message sent successfully');
      return true;
    } catch (error) {
      log(`Error sending Telegram message: ${error}`, 'ERROR');
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
   */
  async sendBuySignal(
    signal: SignalRow,
    poolInfo: { liq_usd: number; fdv_usd: number },
    priceImpact: number
  ): Promise<boolean> {
    const message = this.formatBuySignal(signal, poolInfo, priceImpact);
    return this.sendMessage(message);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ –¥–ª—è Telegram
   */
  private formatBuySignal(
    signal: SignalRow,
    poolInfo: { liq_usd: number; fdv_usd: number },
    priceImpact: number
  ): string {
    const birdeyeLink = createBirdeyeLink(signal.mint);
    
    return `üìà **BUY SIGNAL** üìà

ü™ô **Token:** \`${signal.mint}\`

üìä **Technical Analysis:**
‚Ä¢ EMA Cross: ${signal.ema_cross ? '‚úÖ' : '‚ùå'}
‚Ä¢ Volume Spike: x${formatNumber(signal.vol_spike, 1)} ${signal.vol_spike >= 3 ? '‚úÖ' : '‚ùå'}
‚Ä¢ RSI: ${formatNumber(signal.rsi, 1)} ${signal.rsi < 35 ? '‚úÖ' : '‚ùå'}

üí∞ **Pool Info:**
‚Ä¢ Liquidity: $${formatNumber(poolInfo.liq_usd)}
‚Ä¢ FDV: $${formatNumber(poolInfo.fdv_usd)}
‚Ä¢ Price Impact: ${formatNumber(priceImpact, 2)}%

üîó **Links:**
[üìä Birdeye](${birdeyeLink})
[üìà DEXScreener](https://dexscreener.com/solana/${signal.mint})

‚è∞ Signal Time: ${signal.created_at.toLocaleString()}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async sendErrorMessage(error: string): Promise<void> {
    const message = `üö® **Signal Bot Error** üö®\n\n\`${error}\``;
    await this.sendMessage(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
   */
  async sendStats(stats: {
    signalsProcessed: number;
    signalsSent: number;
    tokensAnalyzed: number;
    uptime: number;
  }): Promise<void> {
    const uptimeHours = (stats.uptime / 3600).toFixed(1);
    
    const message = `üìä **Signal Bot Stats** üìä

üîÑ **Processing:**
‚Ä¢ Signals Processed: ${stats.signalsProcessed}
‚Ä¢ Signals Sent: ${stats.signalsSent}
‚Ä¢ Tokens Analyzed: ${stats.tokensAnalyzed}

‚è±Ô∏è **Uptime:** ${uptimeHours} hours

${new Date().toLocaleString()}`;
    
    await this.sendMessage(message);
  }

  /**
   * –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async sendTestMessage(): Promise<boolean> {
    const message = `ü§ñ **Signal Bot Started** ü§ñ

Bot is now running and monitoring for trading signals.

Settings:
‚Ä¢ Min Token Age: 14 days
‚Ä¢ Min Liquidity: $10,000
‚Ä¢ Max FDV: $5,000,000
‚Ä¢ Volume Spike: 3x+
‚Ä¢ RSI Oversold: <35

Ready to catch signals! üéØ`;

    return this.sendMessage(message);
  }
} 