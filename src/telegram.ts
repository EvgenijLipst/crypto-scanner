// telegram.ts - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram

import fetch from 'cross-fetch';
import fs from 'fs';
import path from 'path';
import { SignalRow } from './types';
import { formatNumber, escapeMarkdown, createBirdeyeLink, log } from './utils';

export class TelegramBot {
  private token: string;
  private chatId: number;
  private baseUrl: string;
  private logFilePath: string;

  constructor(token: string, chatId: string) {
    this.token = token;
    
    log(`TelegramBot constructor received chatId: "${chatId}" (type: ${typeof chatId}, length: ${chatId?.length})`);
    
    // Clean and parse chatId more carefully
    const cleanedChatId = chatId.trim().replace(/^[=\s]+/, '');
    log(`Cleaned chatId: "${cleanedChatId}"`);
    
    const parsedChatId = parseInt(cleanedChatId);
    log(`parseInt("${cleanedChatId}") = ${parsedChatId} (isNaN: ${isNaN(parsedChatId)})`);
    
    this.chatId = parsedChatId || 0;
    this.baseUrl = `https://api.telegram.org/bot${token}`;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
    this.logFilePath = path.join(process.cwd(), 'telegram.log');
    
    log(`TelegramBot initialized with final chat_id: ${this.chatId}, token: ${token.substring(0, 10)}...`);
    log(`Telegram logs will be saved to: ${this.logFilePath}`);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
   */
  private logToFile(message: string, status: 'SENT' | 'ERROR'): void {
    try {
      const timestamp = new Date().toISOString();
      const logEntry = `[${timestamp}] [${status}] ${message}\n`;
      fs.appendFileSync(this.logFilePath, logEntry, 'utf8');
    } catch (error) {
      log(`Failed to write to telegram log file: ${error}`, 'ERROR');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   */
  async sendMessage(text: string, parseMode: 'Markdown' | 'MarkdownV2' | 'HTML' = 'Markdown'): Promise<boolean> {
    try {
      log(`Attempting to send message to chat_id: ${this.chatId} with token: ${this.token.substring(0, 10)}...`);
      
      const url = `${this.baseUrl}/sendMessage`;
      const payload = {
        chat_id: this.chatId,
        text,
        parse_mode: parseMode,
        disable_web_page_preview: true,
      };
      
      log(`Payload: ${JSON.stringify(payload)}`);
      
      // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const error = await response.text();
        log(`Telegram API error: ${response.status} ${error}`, 'ERROR');
        this.logToFile(`ERROR: ${response.status} ${error} | Message: ${text}`, 'ERROR');
        return false;
      }

      log('Telegram message sent successfully');
      this.logToFile(text, 'SENT');
      return true;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      const errorName = error instanceof Error ? error.name : 'Unknown';
      
      if (errorName === 'AbortError' || errorMessage.includes('timeout')) {
        log('Telegram message timeout - network issue, will retry later', 'WARN');
        this.logToFile(`TIMEOUT: ${errorMessage} | Message: ${text}`, 'ERROR');
      } else if (errorMessage.includes('Connection terminated')) {
        log('Telegram connection terminated - network issue, will retry later', 'WARN');
        this.logToFile(`CONNECTION_ERROR: ${errorMessage} | Message: ${text}`, 'ERROR');
      } else {
        log(`Error sending Telegram message: ${errorMessage}`, 'ERROR');
        this.logToFile(`SEND_ERROR: ${errorMessage} | Message: ${text}`, 'ERROR');
      }
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
   */
  async sendBuySignal(
    signal: SignalRow,
    poolInfo: { liq_usd: number; fdv_usd: number },
    priceImpact: number
  ): Promise<boolean> {
    const message = this.formatBuySignal(signal, poolInfo, priceImpact);
    return this.sendMessage(message);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ –¥–ª—è Telegram
   */
  private formatBuySignal(
    signal: SignalRow,
    poolInfo: { liq_usd: number; fdv_usd: number },
    priceImpact: number
  ): string {
    const birdeyeLink = createBirdeyeLink(signal.mint);
    
    // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç–æ–∏–Ω –ø–æ–∫—É–ø–∫–∏
    const reasons = [];
    if (signal.ema_cross) reasons.push('‚úÖ EMA 9/21 –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)');
    if (signal.vol_spike >= 3) reasons.push(`‚úÖ –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ x${formatNumber(signal.vol_spike, 1)} (–≤—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å)`);
    if (signal.rsi < 35) reasons.push(`‚úÖ RSI ${formatNumber(signal.rsi, 1)} (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)`);
    if (poolInfo.liq_usd >= 10000) reasons.push('‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (>$10K)');
    if (poolInfo.fdv_usd <= 5000000) reasons.push('‚úÖ –†–∞–∑—É–º–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (<$5M FDV)');
    
    return `üöÄ **–°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò** üöÄ

ü™ô **–¢–æ–∫–µ–Ω:** \`${signal.mint}\`

üí° **–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –ø–æ–∫—É–ø–∞—Ç—å:**
${reasons.join('\n')}

üìä **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
‚Ä¢ EMA Cross: ${signal.ema_cross ? '‚úÖ' : '‚ùå'}
‚Ä¢ Volume Spike: x${formatNumber(signal.vol_spike, 1)} ${signal.vol_spike >= 3 ? '‚úÖ' : '‚ùå'}
‚Ä¢ RSI: ${formatNumber(signal.rsi, 1)} ${signal.rsi < 35 ? '‚úÖ' : '‚ùå'}

üí∞ **–î–∞–Ω–Ω—ã–µ –ø—É–ª–∞:**
‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: $${formatNumber(poolInfo.liq_usd)}
‚Ä¢ FDV: $${formatNumber(poolInfo.fdv_usd)}
‚Ä¢ –ü—Ä–∞–π—Å-–∏–º–ø–∞–∫—Ç: ${formatNumber(priceImpact, 2)}%

üîó **–°—Å—ã–ª–∫–∏:**
[üìä Birdeye](${birdeyeLink})
[üìà DEXScreener](https://dexscreener.com/solana/${signal.mint})

‚è∞ ${new Date(signal.signal_ts * 1000).toLocaleString()}`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async sendErrorMessage(error: string): Promise<void> {
    const message = `üö® **Signal Bot Error** üö®\n\n\`${escapeMarkdown(error)}\``;
    await this.sendMessage(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ WebSocket
   */
  async sendActivityReport(stats: {
    messagesReceived: number;
    logsNotifications: number;
    programNotifications?: number;
    swapEventsProcessed: number;
    poolEventsProcessed: number;
    otherMessages: number;
    errorsEncountered: number;
    uptimeMinutes: number;
    lastActivityMinutes: number;
    isConnected: boolean;
    messagesPerMinute: string;
  }): Promise<void> {
    const statusIcon = stats.isConnected ? 'üü¢' : 'üî¥';
    const activityIcon = stats.lastActivityMinutes < 2 ? 'üî•' : stats.lastActivityMinutes < 10 ? '‚ö°' : '‚è≥';
    
    const programCount = stats.programNotifications || stats.logsNotifications || 0;
    
    const message = `${statusIcon} **WebSocket Activity Report** ${activityIcon}

üì° **Connection Status:** ${stats.isConnected ? 'Connected' : 'Disconnected'}
‚è±Ô∏è **Uptime:** ${stats.uptimeMinutes} –º–∏–Ω—É—Ç
üïê **Last Activity:** ${stats.lastActivityMinutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

üìä **Message Details:**
‚Ä¢ Total Messages: ${stats.messagesReceived}
‚Ä¢ Program Notifications: ${programCount}
‚Ä¢ AMM Events Processed: ${stats.swapEventsProcessed}
‚Ä¢ Pool Events Found: ${stats.poolEventsProcessed}
‚Ä¢ Other Messages: ${stats.otherMessages}
‚Ä¢ Errors: ${stats.errorsEncountered}
‚Ä¢ Rate: ${stats.messagesPerMinute}/min

${stats.messagesReceived === 0 ? '‚ö†Ô∏è **WARNING**: –ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!' : 
  programCount === 0 ? '‚ö†Ô∏è **WARNING**: –ù–µ—Ç program —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!' : '‚úÖ **WebSocket –∞–∫—Ç–∏–≤–µ–Ω**'}

‚è∞ ${new Date().toLocaleString()}`;
    
    await this.sendMessage(message);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞ Telegram
   */
  getRecentTelegramLogs(limit: number = 50): string[] {
    try {
      if (!fs.existsSync(this.logFilePath)) {
        return ['Log file does not exist yet'];
      }
      
      const content = fs.readFileSync(this.logFilePath, 'utf8');
      const lines = content.trim().split('\n').filter(line => line.length > 0);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
      return lines.slice(-limit);
    } catch (error) {
      return [`Error reading log file: ${error}`];
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥-—Ñ–∞–π–ª Telegram (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
   */
  cleanupTelegramLogs(): void {
    try {
      if (!fs.existsSync(this.logFilePath)) {
        return;
      }
      
      const content = fs.readFileSync(this.logFilePath, 'utf8');
      const lines = content.trim().split('\n').filter(line => line.length > 0);
      
      if (lines.length > 1000) {
        const recentLines = lines.slice(-1000);
        fs.writeFileSync(this.logFilePath, recentLines.join('\n') + '\n', 'utf8');
        log(`Cleaned up telegram log file, kept last 1000 entries`);
      }
    } catch (error) {
      log(`Error cleaning up telegram log file: ${error}`, 'ERROR');
    }
  }
} 