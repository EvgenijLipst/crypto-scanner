"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// index.ts - Main orchestration for Solana Signal Bot
const dotenv_1 = require("dotenv");
const database_1 = require("./database");
const helius_1 = require("./helius");
const telegram_1 = require("./telegram");
const jupiter_1 = require("./jupiter");
const diagnostics_1 = require("./diagnostics");
const utils_1 = require("./utils");
const indicators_1 = require("./indicators");
const types_1 = require("./types");
(0, dotenv_1.config)();
const db = new database_1.Database(process.env.DATABASE_URL);
const helius = new helius_1.HeliusWebSocket(process.env.HELIUS_KEY, db);
const tg = new telegram_1.TelegramBot(process.env.TELEGRAM_TOKEN, process.env.TELEGRAM_CHAT_ID);
const jupiter = new jupiter_1.JupiterAPI();
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
let diagnostics;
async function indicatorSweep() {
    try {
        const pools = await db.getOldPools();
        for (const pool of pools) {
            const candles = await db.getCandles(pool.mint, 40);
            if (candles.length < types_1.MIN_HISTORY_CANDLES)
                continue;
            const indicators = (0, indicators_1.calculateIndicators)(candles);
            if (!indicators)
                continue;
            if ((0, indicators_1.checkBuySignal)(indicators)) {
                await db.createSignal(pool.mint, true, indicators.volSpike, indicators.rsi);
                (0, utils_1.log)(`üö¶ Signal candidate: ${pool.mint}`);
            }
        }
    }
    catch (e) {
        (0, utils_1.log)(`Error in indicatorSweep: ${e}`, 'ERROR');
        await tg.sendErrorMessage(`Indicator Sweep Error: ${e}`);
    }
}
async function notifySweep() {
    try {
        (0, utils_1.log)('üîç Starting notifySweep...');
        (0, utils_1.log)('üìã Getting unnotified signals...');
        const signals = await db.getUnnotifiedSignals();
        (0, utils_1.log)(`üìã Found ${signals.length} unnotified signals`);
        for (const sig of signals) {
            (0, utils_1.log)(`üîç Processing signal: ${JSON.stringify(sig)}`);
            (0, utils_1.log)(`üìã Getting pool info for mint: ${sig.mint}`);
            const pool = await db.getPool(sig.mint);
            if (!pool) {
                (0, utils_1.log)(`‚ùå No pool found for mint: ${sig.mint}`);
                continue;
            }
            (0, utils_1.log)(`üìã Pool info: ${JSON.stringify(pool)}`);
            if (Number(pool.liq_usd) < types_1.MIN_LIQUIDITY_USD) {
                (0, utils_1.log)(`‚ùå Liquidity too low: ${pool.liq_usd} < ${types_1.MIN_LIQUIDITY_USD}`);
                continue;
            }
            if (Number(pool.fdv_usd) > types_1.MAX_FDV_USD) {
                (0, utils_1.log)(`‚ùå FDV too high: ${pool.fdv_usd} > ${types_1.MAX_FDV_USD}`);
                continue;
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ price impact —á–µ—Ä–µ–∑ Jupiter
            (0, utils_1.log)(`üîç Getting Jupiter quote for ${sig.mint}...`);
            const quote = await jupiter.getQuote('EPjFWdd5AufqSSqeM2qA9G4KJ9b9wiG9vG7bG6wGw7bS', sig.mint, 200 * 1e6); // USDC mint, $200
            if (!quote || Number(quote.priceImpactPct) * 100 > types_1.MAX_PRICE_IMPACT_PERCENT) {
                (0, utils_1.log)(`‚ùå Price impact check failed for ${sig.mint}`);
                continue;
            }
            (0, utils_1.log)(`‚úÖ All checks passed for ${sig.mint}, sending to Telegram...`);
            // Passed all filters ‚Äî send to Telegram
            await tg.sendBuySignal(sig, pool, Number(quote.priceImpactPct) * 100);
            (0, utils_1.log)(`üìã Marking signal ${sig.id} as notified...`);
            await db.markSignalNotified(sig.id);
            (0, utils_1.log)(`üì¢ Sent signal for ${sig.mint}`);
        }
        (0, utils_1.log)('‚úÖ notifySweep completed successfully');
    }
    catch (e) {
        (0, utils_1.log)(`Error in notifySweep: ${e}`, 'ERROR');
        (0, utils_1.log)(`Error stack: ${e instanceof Error ? e.stack : 'No stack trace'}`, 'ERROR');
        await tg.sendErrorMessage(`Notification Sweep Error: ${e}`);
    }
}
async function runDiagnostics() {
    try {
        (0, utils_1.log)('üîß Starting diagnostics check...');
        (0, utils_1.log)(`üîç Diagnostics system initialized: ${!!diagnostics}`);
        const health = await diagnostics.runDiagnostics();
        (0, utils_1.log)(`üîç Diagnostics completed: ${health.overallStatus}, found ${health.issues.length} issues`);
        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º—ã
        health.issues.forEach((issue, index) => {
            (0, utils_1.log)(`üö® Issue ${index + 1}: ${issue.issue} (${issue.severity})`);
            (0, utils_1.log)(`   Description: ${issue.description}`);
            (0, utils_1.log)(`   Solution: ${issue.solution}`);
            (0, utils_1.log)(`   Has auto-fix: ${!!issue.autoFix}`);
        });
        if (health.overallStatus === 'CRITICAL') {
            const message = `üö® **CRITICAL SYSTEM ISSUES DETECTED** üö®\n\n` +
                `Issues found: ${health.issues.length}\n` +
                `Status: ${health.overallStatus}\n\n` +
                health.issues.map(i => `‚Ä¢ ${i.issue}: ${i.description}`).join('\n');
            (0, utils_1.log)('üì¢ Sending critical diagnostics alert to Telegram');
            await tg.sendMessage(message);
        }
        else if (health.overallStatus === 'WARNING') {
            (0, utils_1.log)(`‚ö†Ô∏è System warnings detected: ${health.issues.length} issues`);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ Telegram —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
            if (health.issues.length > 3) {
                const message = `‚ö†Ô∏è **SYSTEM WARNINGS** ‚ö†Ô∏è\n\n` +
                    `Issues found: ${health.issues.length}\n\n` +
                    health.issues.slice(0, 5).map(i => `‚Ä¢ ${i.issue}: ${i.description}`).join('\n') +
                    (health.issues.length > 5 ? `\n... –∏ –µ—â–µ ${health.issues.length - 5} –ø—Ä–æ–±–ª–µ–º` : '');
                await tg.sendMessage(message);
            }
        }
        else {
            (0, utils_1.log)('‚úÖ System health check passed');
        }
    }
    catch (e) {
        (0, utils_1.log)(`Error in diagnostics: ${e}`, 'ERROR');
        (0, utils_1.log)(`Diagnostics error stack: ${e instanceof Error ? e.stack : 'No stack trace'}`, 'ERROR');
        await tg.sendErrorMessage(`Diagnostics Error: ${e}`);
    }
}
async function sendWebSocketActivityReport() {
    try {
        (0, utils_1.log)('üìä Sending WebSocket Activity Report...');
        const stats = helius.getActivityStats();
        await tg.sendActivityReport(stats);
        (0, utils_1.log)('‚úÖ WebSocket Activity Report sent successfully');
    }
    catch (e) {
        (0, utils_1.log)(`Error sending WebSocket Activity Report: ${e}`, 'ERROR');
        await tg.sendErrorMessage(`WebSocket Activity Report Error: ${e}`);
    }
}
async function main() {
    await db.initialize();
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    diagnostics = new diagnostics_1.DiagnosticsSystem(db, tg);
    await tg.sendMessage('üöÄ Signal Bot –∑–∞–ø—É—â–µ–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!');
    await helius.connect();
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    setInterval(indicatorSweep, 60000);
    setInterval(notifySweep, 20000);
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(runDiagnostics, 5 * 60 * 1000);
    // WebSocket Activity Report –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(sendWebSocketActivityReport, 10 * 60 * 1000);
    // –ü–µ—Ä–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    setTimeout(runDiagnostics, 30000);
    // –ü–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç –æ WebSocket –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    setTimeout(sendWebSocketActivityReport, 2 * 60 * 1000);
    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    setInterval(() => {
        try {
            tg.cleanupTelegramLogs();
        }
        catch (e) {
            (0, utils_1.log)(`Error cleaning telegram logs: ${e}`, 'ERROR');
        }
    }, 6 * 60 * 60 * 1000); // 6 hours
    (0, utils_1.log)('Signal bot started with diagnostics system.');
}
main().catch(console.error);
