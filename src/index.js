"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// index.ts - Main orchestration for Solana Signal Bot with CoinGecko integration
const dotenv_1 = require("dotenv");
const database_1 = require("./database");
const telegram_1 = require("./telegram");
const jupiter_1 = require("./jupiter");
const coingecko_1 = require("./coingecko");
const token_analyzer_1 = require("./token-analyzer");
const diagnostics_1 = require("./diagnostics");
const utils_1 = require("./utils");
(0, dotenv_1.config)();
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = [
    'DATABASE_URL',
    'TELEGRAM_TOKEN',
    'TELEGRAM_CHAT_ID',
    'COINGECKO_API_KEY'
];
for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
        console.error(`‚ùå Missing required environment variable: ${envVar}`);
        process.exit(1);
    }
}
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const db = new database_1.Database(process.env.DATABASE_URL);
const tg = new telegram_1.TelegramBot(process.env.TELEGRAM_TOKEN, process.env.TELEGRAM_CHAT_ID);
const jupiter = new jupiter_1.JupiterAPI();
const coingecko = new coingecko_1.CoinGeckoAPI(process.env.COINGECKO_API_KEY);
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const analysisConfig = {
    minTokenAgeDays: parseInt(process.env.MIN_TOKEN_AGE_DAYS || '14'),
    minLiquidityUsd: parseInt(process.env.MIN_LIQUIDITY_USD || '10000'),
    maxFdvUsd: parseInt(process.env.MAX_FDV_USD || '5000000'),
    minVolumeSpike: parseFloat(process.env.MIN_VOLUME_SPIKE || '3'),
    maxRsiOversold: parseInt(process.env.MAX_RSI_OVERSOLD || '35'),
    maxPriceImpactPercent: parseFloat(process.env.MAX_PRICE_IMPACT_PERCENT || '3'),
    priceImpactTestAmount: parseFloat(process.env.PRICE_IMPACT_TEST_AMOUNT || '10')
};
const tokenAnalyzer = new token_analyzer_1.TokenAnalyzer(coingecko, jupiter, db, analysisConfig);
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
let diagnostics;
/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤
 */
async function runTokenAnalysis() {
    try {
        (0, utils_1.log)('üîç Starting token analysis cycle...');
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø —Ç–æ–∫–µ–Ω—ã
        const signals = await tokenAnalyzer.analyzeTopTokens();
        if (signals.length === 0) {
            (0, utils_1.log)('No signals found in this cycle');
            return;
        }
        (0, utils_1.log)(`üìä Found ${signals.length} signals:`);
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª
        for (const signal of signals) {
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await db.createSignal(signal.mint, true, // is_buy
                signal.data.volumeSpike || 0, signal.data.rsi || 0);
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                await sendSignalNotification(signal);
                (0, utils_1.log)(`‚úÖ Signal processed: ${signal.symbol} (${signal.mint})`);
            }
            catch (error) {
                (0, utils_1.log)(`‚ùå Error processing signal ${signal.symbol}: ${error}`, 'ERROR');
            }
        }
    }
    catch (error) {
        (0, utils_1.log)(`‚ùå Error in token analysis: ${error}`, 'ERROR');
        await tg.sendErrorMessage(`Token Analysis Error: ${error}`);
    }
}
/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ
 */
async function sendSignalNotification(signal) {
    try {
        const message = formatSignalMessage(signal);
        await tg.sendMessage(message);
    }
    catch (error) {
        (0, utils_1.log)(`Error sending signal notification: ${error}`, 'ERROR');
    }
}
/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ
 */
function formatSignalMessage(signal) {
    const { symbol, name, mint, data: { age, marketCap, fdv, volume24h, priceUsd, volumeSpike, rsi, priceImpact, liquidity } } = signal;
    return `üöÄ BUY SIGNAL DETECTED

üìä ${symbol} (${name})
üè∑Ô∏è Mint: ${mint}

üìà Technical Analysis:
‚Ä¢ Volume Spike: ${volumeSpike?.toFixed(2)}x
‚Ä¢ RSI: ${rsi?.toFixed(1)}
‚Ä¢ EMA 9/21: Crossed Up ‚úÖ

üí∞ Fundamentals:
‚Ä¢ Price: $${priceUsd?.toFixed(6)}
‚Ä¢ Market Cap: $${(marketCap / 1000000).toFixed(2)}M
‚Ä¢ FDV: $${(fdv / 1000000).toFixed(2)}M
‚Ä¢ Volume 24h: $${(volume24h / 1000).toFixed(0)}k
‚Ä¢ Age: ${age} days

üîÑ Liquidity Test:
‚Ä¢ Liquidity: $${liquidity?.toFixed(0)}
‚Ä¢ Price Impact: ${priceImpact?.toFixed(2)}%

‚ö° All criteria met - Ready to trade!`;
}
/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
async function sendActivityReport() {
    try {
        const config = tokenAnalyzer.getConfig();
        const uptime = Math.floor(process.uptime() / 60);
        const report = `üìä Token Analysis Report

‚öôÔ∏è Configuration:
‚Ä¢ Min Age: ${config.minTokenAgeDays} days
‚Ä¢ Min Liquidity: $${config.minLiquidityUsd.toLocaleString()}
‚Ä¢ Max FDV: $${config.maxFdvUsd.toLocaleString()}
‚Ä¢ Min Volume Spike: ${config.minVolumeSpike}x
‚Ä¢ Max RSI Oversold: ${config.maxRsiOversold}
‚Ä¢ Max Price Impact: ${config.maxPriceImpactPercent}%
‚Ä¢ Test Amount: $${config.priceImpactTestAmount}

üïê System Status:
‚Ä¢ Uptime: ${uptime} minutes
‚Ä¢ Analysis Mode: CoinGecko Top 2000
‚Ä¢ Status: Active üü¢

üí° Next analysis in ~10 minutes`;
        await tg.sendMessage(report);
    }
    catch (error) {
        (0, utils_1.log)(`Error sending activity report: ${error}`, 'ERROR');
    }
}
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
 */
async function initialize() {
    try {
        (0, utils_1.log)('üöÄ Initializing Solana Signal Bot...');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.initialize();
        (0, utils_1.log)('‚úÖ Database initialized');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnostics = new diagnostics_1.DiagnosticsSystem(db, tg);
        (0, utils_1.log)('‚úÖ Diagnostics system initialized');
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoinGecko API
        (0, utils_1.log)('üß™ Testing CoinGecko API...');
        const testTokens = await coingecko.getTopSolanaTokens(10);
        (0, utils_1.log)(`‚úÖ CoinGecko API working - fetched ${testTokens.length} test tokens`);
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Jupiter API
        (0, utils_1.log)('üß™ Testing Jupiter API...');
        const testQuote = await jupiter.getQuote('So11111111111111111111111111111111111111112', // SOL
        'EPjFWdd5AufqSSqeM2qA9G4KJ9b9wiG9vG7bG6wGw7bS', // USDC
        1000000000 // 1 SOL
        );
        (0, utils_1.log)(`‚úÖ Jupiter API working - got quote: ${testQuote ? 'success' : 'failed'}`);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await tg.sendMessage('üöÄ Solana Signal Bot started!\n\nüìä Analysis Mode: CoinGecko Top 2000\n‚öôÔ∏è Monitoring for buy signals...');
        (0, utils_1.log)('‚úÖ Initialization complete');
    }
    catch (error) {
        (0, utils_1.log)(`‚ùå Initialization failed: ${error}`, 'ERROR');
        throw error;
    }
}
/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await initialize();
        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        // –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        setInterval(runTokenAnalysis, 10 * 60 * 1000);
        // –û—Ç—á–µ—Ç –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        setInterval(sendActivityReport, 30 * 60 * 1000);
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(async () => {
            try {
                await diagnostics.runDiagnostics();
            }
            catch (error) {
                (0, utils_1.log)(`Diagnostics error: ${error}`, 'ERROR');
            }
        }, 5 * 60 * 1000);
        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(runTokenAnalysis, 30 * 1000);
        setTimeout(sendActivityReport, 2 * 60 * 1000); // –ü–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        setTimeout(async () => {
            try {
                await diagnostics.runDiagnostics();
            }
            catch (error) {
                (0, utils_1.log)(`Initial diagnostics error: ${error}`, 'ERROR');
            }
        }, 30 * 1000);
        (0, utils_1.log)('üéØ All systems running - monitoring for signals...');
    }
    catch (error) {
        (0, utils_1.log)(`‚ùå Fatal error: ${error}`, 'ERROR');
        await tg.sendErrorMessage(`Fatal Error: ${error}`);
        process.exit(1);
    }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
    (0, utils_1.log)('üõë Received SIGINT, shutting down gracefully...');
    await tg.sendMessage('üõë Solana Signal Bot shutting down...');
    process.exit(0);
});
process.on('SIGTERM', async () => {
    (0, utils_1.log)('üõë Received SIGTERM, shutting down gracefully...');
    await tg.sendMessage('üõë Solana Signal Bot shutting down...');
    process.exit(0);
});
// –ó–∞–ø—É—Å–∫
main().catch(async (error) => {
    (0, utils_1.log)(`‚ùå Unhandled error: ${error}`, 'ERROR');
    try {
        await tg.sendErrorMessage(`Unhandled Error: ${error}`);
    }
    catch (e) {
        (0, utils_1.log)(`‚ùå Failed to send error message: ${e}`, 'ERROR');
    }
    process.exit(1);
});
