// diagnostics.ts - –ê–≤—Ç–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Å–∞–º–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã

import fs from 'fs';
import path from 'path';
import { Database } from './database';
import { TelegramBot } from './telegram';
import { log } from './utils';
import { AutoRepairSystem } from './auto-repair';

interface DiagnosticResult {
  issue: string;
  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  description: string;
  autoFix?: () => Promise<boolean>;
  solution: string;
}

interface SystemHealth {
  overallStatus: 'HEALTHY' | 'WARNING' | 'CRITICAL';
  issues: DiagnosticResult[];
  lastCheck: Date;
  metrics: {
    errorRate: number;
    dbConnections: number;
    telegramErrors: number;
    uptime: number;
  };
}

export class DiagnosticsSystem {
  private database: Database;
  private telegram: TelegramBot;
  private autoRepair: AutoRepairSystem;
  private logFilePath: string;
  private diagnosticsLogPath: string;
  private errorPatterns: Map<string, DiagnosticResult> = new Map();

  constructor(database: Database, telegram: TelegramBot) {
    this.database = database;
    this.telegram = telegram;
    this.autoRepair = new AutoRepairSystem(database, telegram);
    this.logFilePath = path.join(process.cwd(), 'telegram.log');
    this.diagnosticsLogPath = path.join(process.cwd(), 'diagnostics.log');
    
    this.initializeErrorPatterns();
    log('üîß Diagnostics system initialized with auto-repair capabilities');
  }

  private initializeErrorPatterns(): void {
    // –û—à–∏–±–∫–∏ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
    this.errorPatterns.set('token_mint', {
      issue: 'TOKEN_MINT_COLUMN_ERROR',
      severity: 'CRITICAL',
      description: 'Database query using deprecated "token_mint" column',
      autoFix: this.fixTokenMintIssue.bind(this),
      solution: 'Rename token_mint column to mint in database'
    });

    this.errorPatterns.set('Connection terminated', {
      issue: 'DATABASE_CONNECTION_ERROR',
      severity: 'HIGH',
      description: 'Database connection terminated unexpectedly',
      autoFix: this.fixDatabaseConnection.bind(this),
      solution: 'Restart database connection pool'
    });

    this.errorPatterns.set('timeout', {
      issue: 'TELEGRAM_TIMEOUT',
      severity: 'MEDIUM',
      description: 'Telegram API timeout errors',
      solution: 'Check network connectivity and Telegram API status'
    });

    // –û—à–∏–±–∫–∏ —Ç—Ä–µ–π–¥–±–æ—Ç–∞
    this.errorPatterns.set('COULD_NOT_FIND_ANY_ROUTE', {
      issue: 'JUPITER_NO_ROUTE',
      severity: 'HIGH',
      description: 'Jupiter API cannot find trading routes',
      solution: 'Check token liquidity and Jupiter API status'
    });

    this.errorPatterns.set('Quote error', {
      issue: 'JUPITER_QUOTE_ERROR',
      severity: 'HIGH',
      description: 'Jupiter quote API errors',
      solution: 'Check Jupiter API status and token validity'
    });

    this.errorPatterns.set('Swap tx error', {
      issue: 'JUPITER_SWAP_ERROR',
      severity: 'HIGH',
      description: 'Jupiter swap transaction errors',
      solution: 'Check wallet balance and token approvals'
    });

    this.errorPatterns.set('Transaction failed', {
      issue: 'SOLANA_TX_FAILED',
      severity: 'HIGH',
      description: 'Solana transaction execution failed',
      solution: 'Check RPC connection and wallet balance'
    });

    this.errorPatterns.set('Insufficient funds', {
      issue: 'WALLET_INSUFFICIENT_FUNDS',
      severity: 'CRITICAL',
      description: 'Wallet has insufficient funds for trading',
      solution: 'Add funds to trading wallet'
    });

    this.errorPatterns.set('Price impact too high', {
      issue: 'HIGH_PRICE_IMPACT',
      severity: 'MEDIUM',
      description: 'Trade rejected due to high price impact',
      solution: 'Reduce trade size or wait for better liquidity'
    });

    this.errorPatterns.set('Telegram notification failed', {
      issue: 'TELEGRAM_NOTIFICATION_FAILED',
      severity: 'MEDIUM',
      description: 'Failed to send Telegram notifications',
      solution: 'Check Telegram bot token and chat ID'
    });

    this.errorPatterns.set('Rug pull risk detected', {
      issue: 'RUG_PULL_DETECTED',
      severity: 'HIGH',
      description: 'Potential rug pull risk detected',
      solution: 'Review token safety checks and filters'
    });

    this.errorPatterns.set('Database query failed', {
      issue: 'DATABASE_QUERY_ERROR',
      severity: 'HIGH',
      description: 'Database query execution failed',
      solution: 'Check database connection and query syntax'
    });
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  async runDiagnostics(): Promise<SystemHealth> {
    const startTime = Date.now();
    const issues: DiagnosticResult[] = [];

    log('üîç Running system diagnostics...');

    try {
      // 1. –ê–Ω–∞–ª–∏–∑ Telegram –ª–æ–≥–æ–≤
      log('üìã Analyzing Telegram logs...');
      const telegramIssues = await this.analyzeTelegramLogs();
      log(`üìã Found ${telegramIssues.length} Telegram issues`);
      issues.push(...telegramIssues);

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      log('üóÑÔ∏è Checking database health...');
      const dbIssues = await this.checkDatabaseHealth();
      log(`üóÑÔ∏è Found ${dbIssues.length} database issues`);
      issues.push(...dbIssues);

      // 3. –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –æ—à–∏–±–æ–∫
      log('üìä Analyzing error patterns...');
      const errorRateIssues = await this.analyzeErrorPatterns();
      log(`üìä Found ${errorRateIssues.length} error pattern issues`);
      issues.push(...errorRateIssues);

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
      log('üíª Checking system resources...');
      const systemIssues = await this.checkSystemResources();
      log(`üíª Found ${systemIssues.length} system issues`);
      issues.push(...systemIssues);

    } catch (error) {
      log(`‚ùå Diagnostics error: ${error}`, 'ERROR');
      issues.push({
        issue: 'DIAGNOSTICS_ERROR',
        severity: 'HIGH',
        description: `Diagnostics system error: ${error}`,
        solution: 'Check diagnostics system logs and restart if needed'
      });
    }

    const health: SystemHealth = {
      overallStatus: this.calculateOverallStatus(issues),
      issues,
      lastCheck: new Date(),
      metrics: {
        errorRate: await this.calculateErrorRate(),
        dbConnections: await this.checkDbConnections(),
        telegramErrors: await this.countTelegramErrors(),
        uptime: (Date.now() - startTime) / 1000
      }
    };

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    log('üíæ Logging diagnostics results...');
    await this.logDiagnostics(health);

    // –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ AutoRepairSystem
    if (issues.length > 0) {
      log(`üîß Attempting autonomous auto-repairs for ${issues.length} issues...`);
      await this.performAutonomousRepairs(issues);
    }

    log(`üîç Diagnostics completed in ${health.metrics.uptime}s, found ${issues.length} issues`);
    
    return health;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ Telegram –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
   */
  private async analyzeTelegramLogs(): Promise<DiagnosticResult[]> {
    const issues: DiagnosticResult[] = [];

    try {
      log('üîç Starting detailed Telegram log analysis...');
      
      const logs = this.telegram.getRecentTelegramLogs(100);
      log(`üìã Found ${logs.length} recent Telegram log entries`);

      if (logs.length === 0) {
        log('üìã Telegram log file does not exist yet: ' + this.logFilePath);
        return issues;
      }

      // –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
      const errorCounts: { [key: string]: number } = {};
      const detailedErrors: string[] = [];

      logs.forEach((line, index) => {
        log(`üîç Analyzing log line ${index + 1}: ${line.substring(0, 100)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –æ—à–∏–±–æ–∫
        for (const [pattern, config] of this.errorPatterns.entries()) {
          if (line.includes(pattern)) {
            errorCounts[pattern] = (errorCounts[pattern] || 0) + 1;
            detailedErrors.push(`[${pattern}] ${line}`);
            
            log(`üö® Found error pattern "${pattern}" in line: ${line}`);
            
            // –û—Å–æ–±–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è token_mint
            if (pattern === 'token_mint') {
              log('üîç DETAILED token_mint error analysis:');
              log(`  - Full line: ${line}`);
              log(`  - Line length: ${line.length}`);
              log(`  - Contains "column": ${line.includes('column')}`);
              log(`  - Contains "does not exist": ${line.includes('does not exist')}`);
              log(`  - Line index in logs: ${index}`);
              
              // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
              if (index > 0) {
                log(`  - Previous line: ${logs[index - 1]}`);
              }
              if (index < logs.length - 1) {
                log(`  - Next line: ${logs[index + 1]}`);
              }
            }
          }
        }
      });

             log(`üìä Error pattern counts: ${JSON.stringify(errorCounts, null, 2)}`);
      log(`üìã Detailed errors found: ${detailedErrors.length}`);

      // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const [pattern, count] of Object.entries(errorCounts)) {
        const config = this.errorPatterns.get(pattern);
        if (config && count > 0) {
          log(`üö® Creating diagnostic result for pattern "${pattern}" with ${count} occurrences`);
          
          const issue: DiagnosticResult = {
            issue: config.issue,
            severity: config.severity,
            description: `${config.description} (${count} occurrences)`,
            solution: config.solution,
            autoFix: config.autoFix
          };

          issues.push(issue);
          
          // –î–ª—è token_mint –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          if (pattern === 'token_mint') {
            log('üîß token_mint error detected, attempting immediate auto-fix...');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if (config.autoFix) {
              try {
                const fixResult = await config.autoFix();
                log(`üîß Auto-fix result for token_mint: ${fixResult ? 'SUCCESS' : 'FAILED'}`);
                
                if (fixResult) {
                  await this.telegram.sendMessage(
                    '‚úÖ **Auto-fix Applied**\n' +
                    'Successfully fixed token_mint column issue in database.\n' +
                    'System should now work normally.'
                  );
                } else {
                  await this.telegram.sendMessage(
                    '‚ùå **Auto-fix Failed**\n' +
                    'Could not automatically fix token_mint issue.\n' +
                    'Manual intervention may be required.'
                  );
                }
              } catch (error) {
                log(`‚ùå Auto-fix error: ${error}`, 'ERROR');
                await this.telegram.sendMessage(
                  'üö® **Auto-fix Error**\n' +
                  `Failed to apply auto-fix: ${error}`
                );
              }
            }
          }
        }
      }

      log(`üìã Total diagnostic issues created: ${issues.length}`);

    } catch (error) {
      log(`Error analyzing Telegram logs: ${error}`, 'ERROR');
      issues.push({
        issue: 'LOG_ANALYSIS_ERROR',
        severity: 'MEDIUM',
        description: `Failed to analyze Telegram logs: ${error}`,
        solution: 'Check log file permissions and format'
      });
    }

    return issues;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async checkDatabaseHealth(): Promise<DiagnosticResult[]> {
    const issues: DiagnosticResult[] = [];

    try {
      // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await this.database.getOldPools();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã signals
      const result = await (this.database as any).pool.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'signals'
      `);
      
      const columns = result.rows.map((row: any) => row.column_name);
      
      if (columns.includes('token_mint')) {
        issues.push({
          issue: 'OLD_SCHEMA_DETECTED',
          severity: 'CRITICAL',
          description: 'Table signals still contains old "token_mint" column',
          autoFix: this.fixTableSchema.bind(this),
          solution: 'Migrate token_mint column to mint'
        });
      }

      if (!columns.includes('mint')) {
        issues.push({
          issue: 'MISSING_MINT_COLUMN',
          severity: 'CRITICAL',
          description: 'Table signals missing required "mint" column',
          autoFix: this.addMintColumn.bind(this),
          solution: 'Add mint column to signals table'
        });
      }

    } catch (error) {
      issues.push({
        issue: 'DATABASE_UNREACHABLE',
        severity: 'CRITICAL',
        description: `Cannot connect to database: ${error}`,
        solution: 'Check database connection string and network connectivity'
      });
    }

    return issues;
  }

  /**
   * –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º–∞ —Å token_mint
   */
  private async fixTokenMintIssue(): Promise<boolean> {
    try {
      log('üîß Attempting to fix token_mint issue...');
      log('üîç Checking current database schema...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const result = await (this.database as any).pool.query(`
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'signals'
        ORDER BY ordinal_position
      `);
      
      const columns = result.rows.map((row: any) => row.column_name);
      log(`üìã Current signals table columns: ${columns.join(', ')}`);
      
      const hasTokenMint = columns.includes('token_mint');
      const hasMint = columns.includes('mint');
      
      log(`üîç Has token_mint column: ${hasTokenMint}`);
      log(`üîç Has mint column: ${hasMint}`);
      
      if (hasTokenMint && hasMint) {
        log('üîß Both columns exist, dropping token_mint...');
        await (this.database as any).pool.query(`
          ALTER TABLE signals DROP COLUMN token_mint CASCADE;
        `);
        log('‚úÖ Successfully dropped token_mint column');
      } else if (hasTokenMint && !hasMint) {
        log('üîß Renaming token_mint to mint...');
        await (this.database as any).pool.query(`
          ALTER TABLE signals RENAME COLUMN token_mint TO mint;
        `);
        log('‚úÖ Successfully renamed token_mint to mint');
      } else if (!hasTokenMint && hasMint) {
        log('‚úÖ Schema is already correct (mint column exists, token_mint does not)');
      } else {
        log('‚ùå Neither column exists, adding mint column...');
        await (this.database as any).pool.query(`
          ALTER TABLE signals ADD COLUMN mint TEXT;
        `);
        log('‚úÖ Successfully added mint column');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const finalResult = await (this.database as any).pool.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'signals'
        ORDER BY ordinal_position
      `);
      
      const finalColumns = finalResult.rows.map((row: any) => row.column_name);
      log(`üìã Final signals table columns: ${finalColumns.join(', ')}`);
      
      return true;
    } catch (error) {
      log(`‚ùå Failed to fix token_mint issue: ${error}`, 'ERROR');
      log(`‚ùå Error details: ${JSON.stringify(error, null, 2)}`);
      return false;
    }
  }

  /**
   * –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã
   */
  private async fixTableSchema(): Promise<boolean> {
    try {
      log('üîß Attempting to fix table schema...');
      
      await (this.database as any).pool.query(`
        ALTER TABLE signals RENAME COLUMN token_mint TO mint;
      `);
      
      log('‚úÖ Table schema fixed');
      return true;
    } catch (error) {
      log(`‚ùå Failed to fix table schema: ${error}`, 'ERROR');
      return false;
    }
  }

  /**
   * –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É mint
   */
  private async addMintColumn(): Promise<boolean> {
    try {
      log('üîß Adding mint column...');
      
      await (this.database as any).pool.query(`
        ALTER TABLE signals ADD COLUMN mint TEXT;
      `);
      
      log('‚úÖ Mint column added');
      return true;
    } catch (error) {
      log(`‚ùå Failed to add mint column: ${error}`, 'ERROR');
      return false;
    }
  }

  /**
   * –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  private async fixDatabaseConnection(): Promise<boolean> {
    try {
      log('üîß Attempting to fix database connection...');
      
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      await (this.database as any).pool.end();
      await this.database.initialize();
      
      log('‚úÖ Database connection reestablished');
      return true;
    } catch (error) {
      log(`‚ùå Failed to fix database connection: ${error}`, 'ERROR');
      return false;
    }
  }

  /**
   * –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ AutoRepairSystem
   */
  private async performAutonomousRepairs(issues: DiagnosticResult[]): Promise<void> {
    let criticalIssues = 0;
    let fixedIssues = 0;
    
    for (const issue of issues) {
      if (issue.severity === 'CRITICAL' || issue.severity === 'HIGH') {
        criticalIssues++;
        
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          const fixed = await this.autoRepair.handleCriticalError(issue.issue, {
            severity: issue.severity,
            description: issue.description,
            solution: issue.solution
          });
          
          if (fixed) {
            fixedIssues++;
            log(`‚úÖ Autonomous repair successful: ${issue.issue}`);
          } else {
            log(`‚ùå Autonomous repair failed: ${issue.issue}`);
            
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if (issue.autoFix) {
              try {
                const legacyFixed = await issue.autoFix();
                if (legacyFixed) {
                  fixedIssues++;
                  log(`‚úÖ Legacy auto-fix successful: ${issue.issue}`);
                }
              } catch (error) {
                log(`‚ùå Legacy auto-fix error for ${issue.issue}: ${error}`, 'ERROR');
              }
            }
          }
        } catch (error) {
          log(`‚ùå Autonomous repair error for ${issue.issue}: ${error}`, 'ERROR');
        }
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (criticalIssues > 3) {
      await this.telegram.sendMessage(
        `ü§ñ **Autonomous System Repair** ü§ñ\n\n` +
        `Found ${criticalIssues} critical issues.\n` +
        `Auto-repaired: ${fixedIssues}\n` +
        `Status: ${fixedIssues === criticalIssues ? '‚úÖ All issues resolved automatically' : '‚ö†Ô∏è Some issues may require manual intervention'}\n\n` +
        `System is now self-healing and will continue monitoring.`
      );
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π (legacy –º–µ—Ç–æ–¥)
   */
  private async attemptAutoFixes(issues: DiagnosticResult[]): Promise<void> {
    for (const issue of issues) {
      if (issue.autoFix && issue.severity === 'CRITICAL') {
        log(`üîß Attempting auto-fix for: ${issue.issue}`);
        
        try {
          const success = await issue.autoFix();
          
          if (success) {
            await this.telegram.sendMessage(
              `üîß **Auto-Fix Successful** ‚úÖ\n\n` +
              `Issue: ${issue.issue}\n` +
              `Description: ${issue.description}\n` +
              `Status: Fixed automatically`
            );
          } else {
            await this.telegram.sendMessage(
              `üîß **Auto-Fix Failed** ‚ùå\n\n` +
              `Issue: ${issue.issue}\n` +
              `Description: ${issue.description}\n` +
              `Action Required: Manual intervention needed`
            );
          }
        } catch (error) {
          log(`‚ùå Auto-fix error for ${issue.issue}: ${error}`, 'ERROR');
        }
      }
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫
  private async analyzeErrorPatterns(): Promise<DiagnosticResult[]> { return []; }
  private async checkSystemResources(): Promise<DiagnosticResult[]> { return []; }
  private async calculateErrorRate(): Promise<number> { return 0; }
  private async checkDbConnections(): Promise<number> { return 1; }
  private async countTelegramErrors(): Promise<number> { return 0; }

  private calculateOverallStatus(issues: DiagnosticResult[]): 'HEALTHY' | 'WARNING' | 'CRITICAL' {
    if (issues.some(i => i.severity === 'CRITICAL')) return 'CRITICAL';
    if (issues.some(i => i.severity === 'HIGH')) return 'WARNING';
    if (issues.length > 0) return 'WARNING';
    return 'HEALTHY';
  }

  private async logDiagnostics(health: SystemHealth): Promise<void> {
    const logEntry = {
      timestamp: new Date().toISOString(),
      status: health.overallStatus,
      issuesCount: health.issues.length,
      metrics: health.metrics,
      issues: health.issues.map(i => ({ issue: i.issue, severity: i.severity }))
    };

    try {
      log(`üíæ Writing diagnostics to: ${this.diagnosticsLogPath}`);
      fs.appendFileSync(
        this.diagnosticsLogPath, 
        JSON.stringify(logEntry) + '\n', 
        'utf8'
      );
      log(`‚úÖ Diagnostics log written successfully`);
    } catch (error) {
      log(`‚ùå Failed to write diagnostics log: ${error}`, 'ERROR');
    }
  }
} 