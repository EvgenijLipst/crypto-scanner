"use strict";
// telegram.ts - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramBot = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
class TelegramBot {
    constructor(token, chatId) {
        this.token = token;
        (0, utils_1.log)(`TelegramBot constructor received chatId: "${chatId}" (type: ${typeof chatId}, length: ${chatId?.length})`);
        // Clean and parse chatId more carefully
        const cleanedChatId = chatId.trim().replace(/^[=\s]+/, '');
        (0, utils_1.log)(`Cleaned chatId: "${cleanedChatId}"`);
        const parsedChatId = parseInt(cleanedChatId);
        (0, utils_1.log)(`parseInt("${cleanedChatId}") = ${parsedChatId} (isNaN: ${isNaN(parsedChatId)})`);
        this.chatId = parsedChatId || 0;
        this.baseUrl = `https://api.telegram.org/bot${token}`;
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        this.logFilePath = path_1.default.join(process.cwd(), 'telegram.log');
        (0, utils_1.log)(`TelegramBot initialized with final chat_id: ${this.chatId}, token: ${token.substring(0, 10)}...`);
        (0, utils_1.log)(`Telegram logs will be saved to: ${this.logFilePath}`);
    }
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
     */
    logToFile(message, status) {
        try {
            const timestamp = new Date().toISOString();
            const logEntry = `[${timestamp}] [${status}] ${message}\n`;
            fs_1.default.appendFileSync(this.logFilePath, logEntry, 'utf8');
        }
        catch (error) {
            (0, utils_1.log)(`Failed to write to telegram log file: ${error}`, 'ERROR');
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
     */
    async sendMessage(text, parseMode = 'Markdown') {
        try {
            (0, utils_1.log)(`Attempting to send message to chat_id: ${this.chatId} with token: ${this.token.substring(0, 10)}...`);
            const url = `${this.baseUrl}/sendMessage`;
            const payload = {
                chat_id: this.chatId,
                text,
                parse_mode: parseMode,
                disable_web_page_preview: true,
            };
            (0, utils_1.log)(`Payload: ${JSON.stringify(payload)}`);
            // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥
            const response = await (0, cross_fetch_1.default)(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
                signal: controller.signal,
            });
            clearTimeout(timeoutId);
            if (!response.ok) {
                const error = await response.text();
                (0, utils_1.log)(`Telegram API error: ${response.status} ${error}`, 'ERROR');
                this.logToFile(`ERROR: ${response.status} ${error} | Message: ${text}`, 'ERROR');
                return false;
            }
            (0, utils_1.log)('Telegram message sent successfully');
            this.logToFile(text, 'SENT');
            return true;
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            const errorName = error instanceof Error ? error.name : 'Unknown';
            if (errorName === 'AbortError' || errorMessage.includes('timeout')) {
                (0, utils_1.log)('Telegram message timeout - network issue, will retry later', 'WARN');
                this.logToFile(`TIMEOUT: ${errorMessage} | Message: ${text}`, 'ERROR');
            }
            else if (errorMessage.includes('Connection terminated')) {
                (0, utils_1.log)('Telegram connection terminated - network issue, will retry later', 'WARN');
                this.logToFile(`CONNECTION_ERROR: ${errorMessage} | Message: ${text}`, 'ERROR');
            }
            else {
                (0, utils_1.log)(`Error sending Telegram message: ${errorMessage}`, 'ERROR');
                this.logToFile(`SEND_ERROR: ${errorMessage} | Message: ${text}`, 'ERROR');
            }
            return false;
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
     */
    async sendBuySignal(signal, poolInfo, priceImpact) {
        const message = this.formatBuySignal(signal, poolInfo, priceImpact);
        return this.sendMessage(message);
    }
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ –¥–ª—è Telegram
     */
    formatBuySignal(signal, poolInfo, priceImpact) {
        const birdeyeLink = (0, utils_1.createBirdeyeLink)(signal.mint);
        // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç–æ–∏–Ω –ø–æ–∫—É–ø–∫–∏
        const reasons = [];
        if (signal.ema_cross)
            reasons.push('‚úÖ EMA 9/21 –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)');
        if (signal.vol_spike >= 3)
            reasons.push(`‚úÖ –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ x${(0, utils_1.formatNumber)(signal.vol_spike, 1)} (–≤—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å)`);
        if (signal.rsi < 35)
            reasons.push(`‚úÖ RSI ${(0, utils_1.formatNumber)(signal.rsi, 1)} (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)`);
        if (poolInfo.liq_usd >= 10000)
            reasons.push('‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (>$10K)');
        if (poolInfo.fdv_usd <= 5000000)
            reasons.push('‚úÖ –†–∞–∑—É–º–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (<$5M FDV)');
        return `üöÄ **–°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò** üöÄ

ü™ô **–¢–æ–∫–µ–Ω:** \`${signal.mint}\`

üí° **–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –ø–æ–∫—É–ø–∞—Ç—å:**
${reasons.join('\n')}

üìä **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
‚Ä¢ EMA Cross: ${signal.ema_cross ? '‚úÖ' : '‚ùå'}
‚Ä¢ Volume Spike: x${(0, utils_1.formatNumber)(signal.vol_spike, 1)} ${signal.vol_spike >= 3 ? '‚úÖ' : '‚ùå'}
‚Ä¢ RSI: ${(0, utils_1.formatNumber)(signal.rsi, 1)} ${signal.rsi < 35 ? '‚úÖ' : '‚ùå'}

üí∞ **–î–∞–Ω–Ω—ã–µ –ø—É–ª–∞:**
‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: $${(0, utils_1.formatNumber)(poolInfo.liq_usd)}
‚Ä¢ FDV: $${(0, utils_1.formatNumber)(poolInfo.fdv_usd)}
‚Ä¢ –ü—Ä–∞–π—Å-–∏–º–ø–∞–∫—Ç: ${(0, utils_1.formatNumber)(priceImpact, 2)}%

üîó **–°—Å—ã–ª–∫–∏:**
[üìä Birdeye](${birdeyeLink})
[üìà DEXScreener](https://dexscreener.com/solana/${signal.mint})

‚è∞ ${new Date(signal.signal_ts * 1000).toLocaleString()}`;
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    async sendErrorMessage(error) {
        const message = `üö® **Signal Bot Error** üö®\n\n\`${(0, utils_1.escapeMarkdown)(error)}\``;
        await this.sendMessage(message);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ WebSocket
     */
    async sendActivityReport(stats) {
        const statusIcon = stats.isConnected ? 'üü¢' : 'üî¥';
        const activityIcon = stats.lastActivityMinutes < 2 ? 'üî•' : stats.lastActivityMinutes < 10 ? '‚ö°' : '‚è≥';
        const programCount = stats.programNotifications || stats.logsNotifications || 0;
        const message = `${statusIcon} **WebSocket Activity Report** ${activityIcon}

üì° **Connection Status:** ${stats.isConnected ? 'Connected' : 'Disconnected'}
‚è±Ô∏è **Uptime:** ${stats.uptimeMinutes} –º–∏–Ω—É—Ç
üïê **Last Activity:** ${stats.lastActivityMinutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

üìä **Message Details:**
‚Ä¢ Total Messages: ${stats.messagesReceived}
‚Ä¢ Program Notifications: ${programCount}
‚Ä¢ AMM Events Processed: ${stats.swapEventsProcessed}
‚Ä¢ Pool Events Found: ${stats.poolEventsProcessed}
‚Ä¢ Other Messages: ${stats.otherMessages}
‚Ä¢ Errors: ${stats.errorsEncountered}
‚Ä¢ Rate: ${stats.messagesPerMinute}/min

${stats.messagesReceived === 0 ? '‚ö†Ô∏è **WARNING**: –ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!' :
            programCount === 0 ? '‚ö†Ô∏è **WARNING**: –ù–µ—Ç program —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!' : '‚úÖ **WebSocket –∞–∫—Ç–∏–≤–µ–Ω**'}

‚è∞ ${new Date().toLocaleString()}`;
        await this.sendMessage(message);
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞ Telegram
     */
    getRecentTelegramLogs(limit = 50) {
        try {
            if (!fs_1.default.existsSync(this.logFilePath)) {
                return ['Log file does not exist yet'];
            }
            const content = fs_1.default.readFileSync(this.logFilePath, 'utf8');
            const lines = content.trim().split('\n').filter(line => line.length > 0);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
            return lines.slice(-limit);
        }
        catch (error) {
            return [`Error reading log file: ${error}`];
        }
    }
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥-—Ñ–∞–π–ª Telegram (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
     */
    cleanupTelegramLogs() {
        try {
            if (!fs_1.default.existsSync(this.logFilePath)) {
                return;
            }
            const content = fs_1.default.readFileSync(this.logFilePath, 'utf8');
            const lines = content.trim().split('\n').filter(line => line.length > 0);
            if (lines.length > 1000) {
                const recentLines = lines.slice(-1000);
                fs_1.default.writeFileSync(this.logFilePath, recentLines.join('\n') + '\n', 'utf8');
                (0, utils_1.log)(`Cleaned up telegram log file, kept last 1000 entries`);
            }
        }
        catch (error) {
            (0, utils_1.log)(`Error cleaning up telegram log file: ${error}`, 'ERROR');
        }
    }
}
exports.TelegramBot = TelegramBot;
