"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoinGeckoAPI = void 0;
// coingecko.ts - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CoinGecko API –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const utils_1 = require("./utils");
class CoinGeckoAPI {
    constructor(apiKey) {
        this.baseUrl = 'https://api.coingecko.com/api/v3';
        this.proBaseUrl = 'https://pro-api.coingecko.com/api/v3';
        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
        this.cache = new Map();
        this.solanaTokensCache = [];
        this.solanaTokensCacheTime = 0;
        this.solanaTokensCacheTimeout = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ rate limits
        this.lastRequestTime = 0;
        this.requestDelay = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–æ—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)
        this.maxRetries = 2; // –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
        // –°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
        this.dailyUsage = 0;
        this.dailyLimit = 280; // –ñ–µ—Å—Ç–∫–∏–π –ª–∏–º–∏—Ç –Ω–∞ –¥–µ–Ω—å (–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å)
        this.lastResetDate = new Date().toDateString();
        this.apiKey = apiKey;
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
     */
    checkDailyLimit() {
        const today = new Date().toDateString();
        if (this.lastResetDate !== today) {
            this.dailyUsage = 0;
            this.lastResetDate = today;
        }
        if (this.dailyUsage >= this.dailyLimit) {
            (0, utils_1.log)(`‚ö†Ô∏è CoinGecko daily limit reached: ${this.dailyUsage}/${this.dailyLimit}`, 'WARN');
            return false;
        }
        return true;
    }
    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limiting
     */
    async waitForRateLimit() {
        const now = Date.now();
        const timeSinceLastRequest = now - this.lastRequestTime;
        if (timeSinceLastRequest < this.requestDelay) {
            const waitTime = this.requestDelay - timeSinceLastRequest;
            (0, utils_1.log)(`Rate limiting: waiting ${waitTime}ms before next request`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
        }
        this.lastRequestTime = Date.now();
    }
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ retry
     */
    async makeRequest(url, params, headers) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if (!this.checkDailyLimit()) {
            throw new Error('Daily API limit exceeded');
        }
        for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
            try {
                await this.waitForRateLimit();
                const response = await (0, cross_fetch_1.default)(`${url}?${params}`, { headers });
                this.dailyUsage++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                if (response.status === 429) {
                    // Rate limit exceeded - –∂–¥–µ–º –¥–æ–ª—å—à–µ
                    const waitTime = 60000; // 1 –º–∏–Ω—É—Ç–∞
                    (0, utils_1.log)(`Rate limit exceeded. Waiting ${waitTime}ms before retry ${attempt}/${this.maxRetries}`, 'WARN');
                    if (attempt < this.maxRetries) {
                        await new Promise(resolve => setTimeout(resolve, waitTime));
                        continue;
                    }
                }
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`CoinGecko API error: ${response.status} ${response.statusText} - ${errorText}`);
                }
                return await response.json();
            }
            catch (error) {
                (0, utils_1.log)(`Request attempt ${attempt}/${this.maxRetries} failed: ${error}`, 'WARN');
                if (attempt === this.maxRetries) {
                    throw error;
                }
                // –ö–æ—Ä–æ—Ç–∫–∏–π backoff –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
                const backoffDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
                await new Promise(resolve => setTimeout(resolve, backoffDelay));
            }
        }
        throw new Error('Max retries exceeded');
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø Solana —Ç–æ–∫–µ–Ω—ã (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    async getTopSolanaTokens(limit = 2000) {
        try {
            (0, utils_1.log)(`üîÑ Fetching top ${limit} Solana tokens (optimized)...`);
            // –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ Solana —Ç–æ–∫–µ–Ω–æ–≤ (–∫—ç—à –Ω–∞ 24 —á–∞—Å–∞)
            const solanaTokens = await this.getAllSolanaTokens();
            (0, utils_1.log)(`Found ${solanaTokens.length} total Solana tokens`);
            if (solanaTokens.length === 0) {
                return [];
            }
            // –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤—ã—Ö N —Ç–æ–∫–µ–Ω–æ–≤
            const tokensToAnalyze = Math.min(solanaTokens.length, limit);
            const topTokens = await this.getMarketDataForTokens(solanaTokens.slice(0, tokensToAnalyze));
            (0, utils_1.log)(`‚úÖ Successfully fetched ${topTokens.length} Solana tokens (used ${this.dailyUsage}/${this.dailyLimit} daily credits)`);
            return topTokens;
        }
        catch (error) {
            (0, utils_1.log)(`Error fetching top Solana tokens: ${error}`, 'ERROR');
            return [];
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã Solana (–∫—ç—à –Ω–∞ 24 —á–∞—Å–∞)
     */
    async getAllSolanaTokens() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å 24-—á–∞—Å–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏
            const now = Date.now();
            if (this.solanaTokensCache.length > 0 &&
                now - this.solanaTokensCacheTime < this.solanaTokensCacheTimeout) {
                (0, utils_1.log)('Using cached Solana tokens list (24h cache)');
                return this.solanaTokensCache;
            }
            (0, utils_1.log)('Fetching complete coins list (once per day)...');
            const url = `${this.baseUrl}/coins/list`;
            const params = new URLSearchParams({
                include_platform: 'true'
            });
            const headers = {
                'accept': 'application/json'
            };
            const allCoins = await this.makeRequest(url, params, headers);
            (0, utils_1.log)(`Retrieved ${allCoins.length} total coins`);
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Solana —Ç–æ–∫–µ–Ω—ã
            const solanaTokens = allCoins.filter(coin => coin.platforms?.solana);
            (0, utils_1.log)(`Found ${solanaTokens.length} Solana tokens`);
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 24 —á–∞—Å–∞
            this.solanaTokensCache = solanaTokens;
            this.solanaTokensCacheTime = now;
            return solanaTokens;
        }
        catch (error) {
            (0, utils_1.log)(`Error fetching Solana tokens list: ${error}`, 'ERROR');
            return this.solanaTokensCache; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–∞—Ç—á–∏)
     */
    async getMarketDataForTokens(tokens) {
        try {
            (0, utils_1.log)(`Getting market data for ${tokens.length} tokens...`);
            const results = [];
            const batchSize = 50; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞—Ç—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
            for (let i = 0; i < tokens.length; i += batchSize) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –±–∞—Ç—á–µ–º
                if (!this.checkDailyLimit()) {
                    (0, utils_1.log)(`Daily limit reached, stopping at ${results.length} tokens`);
                    break;
                }
                const batch = tokens.slice(i, i + batchSize);
                const batchIds = batch.map(token => token.id).join(',');
                try {
                    (0, utils_1.log)(`Fetching batch ${Math.floor(i / batchSize) + 1}: tokens ${i + 1}-${Math.min(i + batchSize, tokens.length)}`);
                    const url = `${this.baseUrl}/simple/price`;
                    const params = new URLSearchParams({
                        ids: batchIds,
                        vs_currencies: 'usd',
                        include_market_cap: 'true',
                        include_24hr_vol: 'true',
                        include_24hr_change: 'true',
                        include_last_updated_at: 'true'
                    });
                    const headers = {
                        'accept': 'application/json'
                    };
                    const priceData = await this.makeRequest(url, params, headers);
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for (const token of batch) {
                        const data = priceData[token.id];
                        if (data && data.usd) {
                            results.push({
                                mint: token.platforms.solana,
                                symbol: token.symbol.toUpperCase(),
                                name: token.name,
                                marketCap: data.usd_market_cap || 0,
                                fdv: data.usd_market_cap || 0,
                                volume24h: data.usd_24h_vol || 0,
                                priceUsd: data.usd,
                                priceChange24h: data.usd_24h_change || 0,
                                age: 0,
                                lastUpdated: data.last_updated_at ? new Date(data.last_updated_at * 1000).toISOString() : new Date().toISOString()
                            });
                        }
                    }
                    (0, utils_1.log)(`Batch completed: ${results.length} tokens with price data`);
                    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è rate limiting
                    if (i + batchSize < tokens.length) {
                        (0, utils_1.log)(`Waiting 5 seconds before next batch...`);
                        await new Promise(resolve => setTimeout(resolve, 5000));
                    }
                }
                catch (error) {
                    (0, utils_1.log)(`Error processing batch: ${error}`, 'ERROR');
                    break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
                }
            }
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ market cap
            results.sort((a, b) => b.marketCap - a.marketCap);
            (0, utils_1.log)(`Successfully retrieved market data for ${results.length} Solana tokens`);
            return results;
        }
        catch (error) {
            (0, utils_1.log)(`Error getting market data: ${error}`, 'ERROR');
            return [];
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
     */
    getUsageStats() {
        return {
            dailyUsage: this.dailyUsage,
            dailyLimit: this.dailyLimit,
            remaining: this.dailyLimit - this.dailyUsage,
            resetDate: this.lastResetDate
        };
    }
}
exports.CoinGeckoAPI = CoinGeckoAPI;
