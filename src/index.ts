console.log('=== SIGNAL BOT STARTED ===');
console.log('üîÑ Starting initialization process...');
console.log(`‚è∞ Start time: ${new Date().toISOString()}`);

// index.ts - –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: CoinGecko (–º–∏–Ω–∏–º—É–º) + Helius (–∞–∫—Ç–∏–≤–Ω–æ)
import { config } from 'dotenv';
import { Database } from './database';
import { TelegramBot } from './telegram';
import { JupiterAPI } from './jupiter';
import { CoinGeckoAPI } from './coingecko';
import { TokenAnalyzer, AnalysisConfig } from './token-analyzer';
import { HeliusWebSocket } from './helius';
import { DiagnosticsSystem } from './diagnostics';
import { log } from './utils';

config();

console.log('HELIUS_API_KEY:', process.env.HELIUS_API_KEY);
console.log('‚úÖ Environment variables loaded');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = [
  'DATABASE_URL',
  'TELEGRAM_TOKEN', 
  'TELEGRAM_CHAT_ID',
  'COINGECKO_API_KEY',
  'HELIUS_API_KEY'
];
for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    console.error(`‚ùå Missing required environment variable: ${envVar}`);
    process.exit(1);
  }
}
console.log('‚úÖ All required environment variables present');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
console.log('üîÑ Initializing components...');
const db = new Database(process.env.DATABASE_URL!);
const tg = new TelegramBot(process.env.TELEGRAM_TOKEN!, process.env.TELEGRAM_CHAT_ID!);
const jupiter = new JupiterAPI();
const coingecko = new CoinGeckoAPI(process.env.COINGECKO_API_KEY!);

// monitoredTokens ‚Äî –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π Set
const monitoredTokens: Set<string> = new Set();

// HeliusWebSocket –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É
const helius = new HeliusWebSocket(process.env.HELIUS_API_KEY!, db, tg);
console.log('‚úÖ Helius WebSocket initialized');

// TokenAnalyzer –∏ Diagnostics —Å–æ–∑–¥–∞—ë–º –ø–æ—Å–ª–µ
const analysisConfig: AnalysisConfig = {
  minTokenAgeDays: parseInt(process.env.MIN_TOKEN_AGE_DAYS || '14'),
  minLiquidityUsd: parseInt(process.env.MIN_LIQUIDITY_USD || '10000'),
  maxFdvUsd: parseInt(process.env.MAX_FDV_USD || '5000000'),
  minVolumeSpike: parseFloat(process.env.MIN_VOLUME_SPIKE || '3'),
  maxRsiOversold: parseInt(process.env.MAX_RSI_OVERSOLD || '35'),
  maxPriceImpactPercent: parseFloat(process.env.MAX_PRICE_IMPACT_PERCENT || '3'),
  priceImpactTestAmount: parseFloat(process.env.PRICE_IMPACT_TEST_AMOUNT || '10')
};
const tokenAnalyzer = new TokenAnalyzer(coingecko, jupiter, db, analysisConfig);
console.log('‚úÖ TokenAnalyzer created');

// Diagnostics —Å–æ–∑–¥–∞—ë–º –ø–æ—Å–ª–µ
const diagnostics = new DiagnosticsSystem(db, tg);
console.log('‚úÖ Diagnostics system initialized');

// –ö–æ–Ω—Ñ–∏–≥ –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫)
// const analysisConfig: AnalysisConfig = {
//   minTokenAgeDays: parseInt(process.env.MIN_TOKEN_AGE_DAYS || '14'),
//   minLiquidityUsd: parseInt(process.env.MIN_LIQUIDITY_USD || '10000'),
//   maxFdvUsd: parseInt(process.env.MAX_FDV_USD || '5000000'),
//   minVolumeSpike: parseFloat(process.env.MIN_VOLUME_SPIKE || '3'),
//   maxRsiOversold: parseInt(process.env.MAX_RSI_OVERSOLD || '35'),
//   maxPriceImpactPercent: parseFloat(process.env.MAX_PRICE_IMPACT_PERCENT || '3'),
//   priceImpactTestAmount: parseFloat(process.env.PRICE_IMPACT_TEST_AMOUNT || '10')
// };

// console.log('‚úÖ Analysis config loaded');

// const tokenAnalyzer = new TokenAnalyzer(coingecko, jupiter, db, analysisConfig);

// console.log('‚úÖ TokenAnalyzer created');

let apiUsageStats = {
  coingecko: {
    dailyUsage: 0,
    monthlyLimit: 10000,
    lastReset: new Date().toDateString()
  },
  helius: {
    dailyUsage: 0,
    monthlyLimit: 1000000,
    lastReset: new Date().toDateString()
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤ (—Å–Ω–∞—á–∞–ª–∞ –±–∞–∑–∞, –ø–æ—Ç–æ–º CoinGecko)
 */
async function tokenRefresh() {
  try {
    console.log('üîÑ === TOKEN REFRESH STARTED ===');
    log('üîÑ Token refresh starting (48h cycle)...');
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ coin_data (—Å—Ç–∞—Ä—à–µ 72 —á–∞—Å–æ–≤)
    console.log('üîÑ Cleaning up old coin data...');
    await db.cleanupOldCoinData(72);
    console.log('‚úÖ Old coin data cleanup completed');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã CoinGecko
    const today = new Date().toDateString();
    if (apiUsageStats.coingecko.lastReset !== today) {
      apiUsageStats.coingecko.dailyUsage = 0;
      apiUsageStats.coingecko.lastReset = today;
    }
    
    if (apiUsageStats.coingecko.dailyUsage >= 300) { // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
      log('‚ö†Ô∏è CoinGecko daily limit reached, skipping refresh');
      return;
    }
    
    console.log('üîÑ Calling tokenAnalyzer.getTopTokensForMonitoring()...');
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Ç–æ–∫–µ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Å–Ω–∞—á–∞–ª–∞ –∏–∑ –±–∞–∑—ã, –ø–æ—Ç–æ–º –∏–∑ CoinGecko)
    const tokens = await tokenAnalyzer.getTopTokensForMonitoring();
    console.log(`‚úÖ getTopTokensForMonitoring completed, returned ${tokens.length} tokens`);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ CoinGecko
    // (TokenAnalyzer —Å–∞–º —Ä–µ—à–∞–µ—Ç - –±–∞–∑–∞ –∏–ª–∏ CoinGecko)
    
    log(`‚úÖ Token refresh complete: ${tokens.length} tokens ready for monitoring`);
    console.log(`‚úÖ Token refresh complete: ${tokens.length} tokens ready for monitoring`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    await sendTokenRefreshReport(tokens.length);
    
  } catch (error) {
    console.error(`‚ùå Error in token refresh: ${error}`);
    log(`‚ùå Error in token refresh: ${error}`, 'ERROR');
    await tg.sendErrorMessage(`Token Refresh Error: ${error}`);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç Helius WebSocket
 */
async function handleHeliusSignal(mint: string, swapData: any) {
  if (!monitoredTokens.has(mint)) return; // —Ñ–∏–ª—å—Ç—Ä
  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    const result = await tokenAnalyzer.analyzeTokenActivity(mint, swapData);
    
    if (result && result.isSignal) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await db.createSignal(
        result.mint,
        true, // is_buy
        result.data.volumeSpike || 0,
        result.data.rsi || 0
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      await sendSignalNotification(result);
      
      log(`‚úÖ Signal processed: ${result.symbol} (${result.mint})`);
    }
    
  } catch (error) {
    log(`‚ùå Error processing Helius signal: ${error}`, 'ERROR');
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ
 */
async function sendSignalNotification(signal: any) {
  try {
    const d = signal.data;
    const message = `üöÄ **BUY SIGNAL DETECTED** üöÄ\n\nüíé **${signal.symbol}** (${signal.name})\nüìç Mint: \`${signal.mint}\`\n\nüìä **Analysis Results:**\n‚Ä¢ Volume Spike: ${d.volumeSpike?.toFixed(2)}x\n‚Ä¢ RSI: ${d.rsi?.toFixed(2)}\n‚Ä¢ EMA Bull: ${d.emaBull ? '‚úÖ' : '‚ùå'}\n‚Ä¢ ATR: ${d.atr?.toFixed(4)}\n‚Ä¢ NetFlow: ${d.netFlow?.toFixed(2)}\n‚Ä¢ Unique Buyers (5m): ${d.uniqueBuyers}\n‚Ä¢ Liquidity Boost: ${d.liquidityBoost ? 'Yes' : 'No'}\n‚Ä¢ Avg Vol 60m: $${d.avgVol60m?.toFixed(0)}\n‚Ä¢ Vol 5m: $${d.vol5m?.toFixed(0)}\n\n‚ö° **All criteria met - Ready to trade!**`;
    await tg.sendMessage(message);
  } catch (error) {
    log(`Error sending signal notification: ${error}`, 'ERROR');
  }
}

/**
 * –û—Ç—á–µ—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤)
 */
async function sendTokenRefreshReport(tokensCount: number) {
  try {
    const message = `üìä **Token Refresh Report (48h cycle)**

üîÑ **System Status:**
‚Ä¢ Monitored Tokens: ${tokensCount}
‚Ä¢ Analysis Mode: Hybrid (CoinGecko + Helius)
‚Ä¢ Status: Active üü¢

üìà **API Usage:**
‚Ä¢ CoinGecko: ${apiUsageStats.coingecko.dailyUsage}/280 daily
‚Ä¢ Helius: ${apiUsageStats.helius.dailyUsage}/33,333 daily

‚öôÔ∏è **Configuration:**
‚Ä¢ Min Age: ${analysisConfig.minTokenAgeDays} days
‚Ä¢ Min Liquidity: $${analysisConfig.minLiquidityUsd.toLocaleString()}
‚Ä¢ Max FDV: $${analysisConfig.maxFdvUsd.toLocaleString()}
‚Ä¢ Min Volume Spike: ${analysisConfig.minVolumeSpike}x
‚Ä¢ Max RSI Oversold: ${analysisConfig.maxRsiOversold}
‚Ä¢ Max Price Impact: ${analysisConfig.maxPriceImpactPercent}%
‚Ä¢ Test Amount: $${analysisConfig.priceImpactTestAmount}

üéØ **Next token refresh in ~48 hours**
üí° **Optimization:** Top-2000 tokens updated every 48h (more stable, saves API credits)`;

    await tg.sendMessage(message);
    
  } catch (error) {
    log(`Error sending daily report: ${error}`, 'ERROR');
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
 */
async function initialize() {
  try {
    log('üöÄ Initializing Hybrid Solana Signal Bot...');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await tg.sendMessage(`üöÄ **Signal Bot Starting...**

‚öôÔ∏è **Initialization in progress...**
‚Ä¢ Database connection: Connecting...
‚Ä¢ API testing: Starting...
‚Ä¢ Token loading: Preparing...

üì° **Status:** Initializing services...`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.initialize();
    log('‚úÖ Database initialized');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    // diagnostics = new DiagnosticsSystem(db, tg); // This line is removed as per new_code
    log('‚úÖ Diagnostics system initialized');
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoinGecko API
    log('üß™ Testing CoinGecko API...');
    let coingeckoStatus = '‚ùå Failed';
    try {
      const testTokens = await coingecko.getTopSolanaTokens(10);
      coingeckoStatus = `‚úÖ Working (${testTokens.length} tokens)`;
      log(`‚úÖ CoinGecko API working - fetched ${testTokens.length} test tokens`);
    } catch (error) {
      log(`‚ùå CoinGecko API test failed: ${error}`, 'ERROR');
    }
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Jupiter API
    log('üß™ Testing Jupiter API...');
    let jupiterStatus = '‚ùå Failed';
    try {
      const testQuote = await jupiter.getQuote(
        'So11111111111111111111111111111111111111112', // SOL
        'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', // USDC (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å)
        1000000000 // 1 SOL
      );
      jupiterStatus = testQuote ? '‚úÖ Working' : '‚ö†Ô∏è No quote';
      log(`‚úÖ Jupiter API working - got quote: ${testQuote ? 'success' : 'failed'}`);
    } catch (error) {
      log(`‚ùå Jupiter API test failed: ${error}`, 'ERROR');
    }
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    let tokensLoaded = 0;
    let tokenStatus = '‚ùå Failed';
    try {
      await tokenRefresh();
      tokensLoaded = tokenAnalyzer.getMonitoredTokens().length;
      tokenStatus = tokensLoaded > 0 ? `‚úÖ ${tokensLoaded} tokens` : '‚ö†Ô∏è No tokens';
    } catch (error) {
      log(`‚ùå Token refresh failed: ${error}`, 'ERROR');
      tokenStatus = `‚ùå Error: ${error}`;
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Helius WebSocket (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    // if (process.env.HELIUS_API_KEY) { // This block is removed as per new_code
    //   helius = new HeliusWebSocket(process.env.HELIUS_API_KEY, db, tg);
    //   console.log('‚úÖ Helius WebSocket initialized');
    //   helius.onSwap = async (mint: string, swapData: any) => {
    //     if (tokenAnalyzer.shouldMonitorToken(mint)) {
    //       await handleHeliusSignal(mint, swapData);
    //     } else {
    //       log(`Swap for mint ${mint} ignored (not in top-2000)`);
    //     }
    //   };
    //   helius.connect().then(() => log('‚úÖ Helius WebSocket connected')).catch(e => log('‚ùå Helius connect error: ' + e, 'ERROR'));
    // } else {
    //   console.log('‚ö†Ô∏è Helius WebSocket disabled - no API key provided');
    // }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–ø—É—Å–∫–∞
    const systemStatus = (tokensLoaded > 0 && coingeckoStatus.includes('‚úÖ') && (helius ? '‚úÖ Connected' : '‚ùå Disabled')) ? 'üü¢ OPERATIONAL' : 'üü° PARTIAL';
    
    await tg.sendMessage(`üöÄ **Hybrid Solana Signal Bot Started!**

üìä **System Status:** ${systemStatus}

üîß **Component Status:**
‚Ä¢ Database: ‚úÖ Connected
‚Ä¢ CoinGecko API: ${coingeckoStatus}
‚Ä¢ Jupiter API: ${jupiterStatus}
‚Ä¢ Helius WebSocket: ${helius ? '‚úÖ Connected' : '‚ùå Disabled'}
‚Ä¢ Token Loading: ${tokenStatus}

üìà **Configuration:**
‚Ä¢ Analysis Mode: CoinGecko + Helius
‚Ä¢ Strategy: 48h token refresh + Real-time monitoring
‚Ä¢ Monitoring: ${tokensLoaded} tokens

üí° **API Optimization:**
‚Ä¢ CoinGecko: 48h refresh cycle (saves credits)
‚Ä¢ Helius: Real-time monitoring (uses available credits)

${tokensLoaded > 0 ? 'üîç **Ready for signal detection!**' : '‚ö†Ô∏è **Limited functionality - token loading issues**'}

‚è∞ Started at: ${new Date().toLocaleString()}`);
    
    log('‚úÖ Hybrid initialization complete');
    
  } catch (error) {
    log(`‚ùå Initialization failed: ${error}`, 'ERROR');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await tg.sendMessage(`üö® **Signal Bot Initialization Failed!**

‚ùå **Error:** ${error}

üîß **Status:** System failed to start properly
‚ö†Ô∏è **Action Required:** Check logs and restart

‚è∞ Failed at: ${new Date().toLocaleString()}`);
    
    throw error;
  }
}

/**
 * –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
 */
async function start() {
  try {
    await initialize();
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤
    setInterval(tokenRefresh, 48 * 60 * 60 * 1000);
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)
    setInterval(async () => {
      try {
        await db.cleanupOldCoinData(72); // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 72 —á–∞—Å–æ–≤
      } catch (error) {
        log(`Error in cleanup: ${error}`, 'ERROR');
      }
    }, 24 * 60 * 60 * 1000);
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
    setInterval(async () => {
      try {
        await diagnostics.runDiagnostics();
      } catch (error) {
        log(`Error in diagnostics: ${error}`, 'ERROR');
      }
    }, 10 * 60 * 1000);
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤)
    setInterval(async () => {
      try {
        const monitoredCount = tokenAnalyzer.getMonitoredTokens().length;
        await sendTokenRefreshReport(monitoredCount);
      } catch (error) {
        log(`Error in activity report: ${error}`, 'ERROR');
      }
    }, 12 * 60 * 60 * 1000);
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º WebSocket –æ—Ç—á–µ—Ç—ã (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Helius –¥–æ—Å—Ç—É–ø–µ–Ω
    if (helius) {
      setInterval(async () => {
        try {
          await helius!.sendWebSocketActivityReport();
        } catch (error) {
          log(`Error in WebSocket activity report: ${error}`, 'ERROR');
        }
      }, 10 * 60 * 1000);
    }
    
    log('üéØ Hybrid Signal Bot is running...');
    
  } catch (error) {
    log(`‚ùå Failed to start: ${error}`, 'ERROR');
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  log('üõë Shutting down Hybrid Signal Bot...');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
  try {
    await tg.sendMessage(`üõë **Signal Bot Shutting Down**

‚ö†Ô∏è **Manual shutdown detected (SIGINT)**
üîÑ **Status:** Gracefully stopping all services...

üìä **Final Stats:**
‚Ä¢ Uptime: ${Math.floor(process.uptime() / 60)} minutes
‚Ä¢ Monitored Tokens: ${monitoredTokens.size}
‚Ä¢ API Usage: CoinGecko ${apiUsageStats.coingecko.dailyUsage}/333

üîå **Disconnecting services...**`);
  } catch (error) {
    log(`Error sending shutdown notification: ${error}`, 'ERROR');
  }
  
  if (helius) {
    await helius.disconnect();
  }
  await db.close();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  log('üõë Shutting down Hybrid Signal Bot...');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
  try {
    await tg.sendMessage(`üõë **Signal Bot Shutting Down**

‚ö†Ô∏è **System shutdown detected (SIGTERM)**
üîÑ **Status:** Gracefully stopping all services...

üìä **Final Stats:**
‚Ä¢ Uptime: ${Math.floor(process.uptime() / 60)} minutes
‚Ä¢ Monitored Tokens: ${monitoredTokens.size}
‚Ä¢ API Usage: CoinGecko ${apiUsageStats.coingecko.dailyUsage}/333

üîå **Disconnecting services...**`);
  } catch (error) {
    log(`Error sending shutdown notification: ${error}`, 'ERROR');
  }
  
  if (helius) {
    await helius.disconnect();
  }
  await db.close();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
start().catch(console.error); 