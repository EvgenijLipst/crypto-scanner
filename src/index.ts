// index.ts - Main orchestration for Solana Signal Bot with CoinGecko integration
import { config } from 'dotenv';
import { Database } from './database';
import { TelegramBot } from './telegram';
import { JupiterAPI } from './jupiter';
import { CoinGeckoAPI } from './coingecko';
import { TokenAnalyzer, AnalysisConfig } from './token-analyzer';
import { DiagnosticsSystem } from './diagnostics';
import { log } from './utils';

config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = [
  'DATABASE_URL',
  'TELEGRAM_TOKEN', 
  'TELEGRAM_CHAT_ID',
  'COINGECKO_API_KEY'
];

for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    console.error(`‚ùå Missing required environment variable: ${envVar}`);
    process.exit(1);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const db = new Database(process.env.DATABASE_URL!);
const tg = new TelegramBot(process.env.TELEGRAM_TOKEN!, process.env.TELEGRAM_CHAT_ID!);
const jupiter = new JupiterAPI();
const coingecko = new CoinGeckoAPI(process.env.COINGECKO_API_KEY!);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const analysisConfig: AnalysisConfig = {
  minTokenAgeDays: parseInt(process.env.MIN_TOKEN_AGE_DAYS || '14'),
  minLiquidityUsd: parseInt(process.env.MIN_LIQUIDITY_USD || '10000'),
  maxFdvUsd: parseInt(process.env.MAX_FDV_USD || '5000000'),
  minVolumeSpike: parseFloat(process.env.MIN_VOLUME_SPIKE || '3'),
  maxRsiOversold: parseInt(process.env.MAX_RSI_OVERSOLD || '35'),
  maxPriceImpactPercent: parseFloat(process.env.MAX_PRICE_IMPACT_PERCENT || '3'),
  priceImpactTestAmount: parseFloat(process.env.PRICE_IMPACT_TEST_AMOUNT || '10')
};

const tokenAnalyzer = new TokenAnalyzer(coingecko, jupiter, db, analysisConfig);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
let diagnostics: DiagnosticsSystem;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤
 */
async function runTokenAnalysis() {
  try {
    log('üîç Starting token analysis cycle...');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø —Ç–æ–∫–µ–Ω—ã
    const signals = await tokenAnalyzer.analyzeTopTokens();
    
    if (signals.length === 0) {
      log('No signals found in this cycle');
      return;
    }
    
    log(`üìä Found ${signals.length} signals:`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª
    for (const signal of signals) {
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.createSignal(
          signal.mint,
          true, // is_buy
          signal.data.volumeSpike || 0,
          signal.data.rsi || 0
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        await sendSignalNotification(signal);
        
        log(`‚úÖ Signal processed: ${signal.symbol} (${signal.mint})`);
        
      } catch (error) {
        log(`‚ùå Error processing signal ${signal.symbol}: ${error}`, 'ERROR');
      }
    }
    
  } catch (error) {
    log(`‚ùå Error in token analysis: ${error}`, 'ERROR');
    await tg.sendErrorMessage(`Token Analysis Error: ${error}`);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ
 */
async function sendSignalNotification(signal: any) {
  try {
    const message = formatSignalMessage(signal);
    await tg.sendMessage(message);
    
  } catch (error) {
    log(`Error sending signal notification: ${error}`, 'ERROR');
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ
 */
function formatSignalMessage(signal: any): string {
  const {
    symbol,
    name,
    mint,
    data: {
      age,
      marketCap,
      fdv,
      volume24h,
      priceUsd,
      volumeSpike,
      rsi,
      priceImpact,
      liquidity
    }
  } = signal;
  
  return `üöÄ BUY SIGNAL DETECTED

üìä ${symbol} (${name})
üè∑Ô∏è Mint: ${mint}

üìà Technical Analysis:
‚Ä¢ Volume Spike: ${volumeSpike?.toFixed(2)}x
‚Ä¢ RSI: ${rsi?.toFixed(1)}
‚Ä¢ EMA 9/21: Crossed Up ‚úÖ

üí∞ Fundamentals:
‚Ä¢ Price: $${priceUsd?.toFixed(6)}
‚Ä¢ Market Cap: $${(marketCap / 1000000).toFixed(2)}M
‚Ä¢ FDV: $${(fdv / 1000000).toFixed(2)}M
‚Ä¢ Volume 24h: $${(volume24h / 1000).toFixed(0)}k
‚Ä¢ Age: ${age} days

üîÑ Liquidity Test:
‚Ä¢ Liquidity: $${liquidity?.toFixed(0)}
‚Ä¢ Price Impact: ${priceImpact?.toFixed(2)}%

‚ö° All criteria met - Ready to trade!`;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
async function sendActivityReport() {
  try {
    const config = tokenAnalyzer.getConfig();
    const uptime = Math.floor(process.uptime() / 60);
    
    const report = `üìä Token Analysis Report

‚öôÔ∏è Configuration:
‚Ä¢ Min Age: ${config.minTokenAgeDays} days
‚Ä¢ Min Liquidity: $${config.minLiquidityUsd.toLocaleString()}
‚Ä¢ Max FDV: $${config.maxFdvUsd.toLocaleString()}
‚Ä¢ Min Volume Spike: ${config.minVolumeSpike}x
‚Ä¢ Max RSI Oversold: ${config.maxRsiOversold}
‚Ä¢ Max Price Impact: ${config.maxPriceImpactPercent}%
‚Ä¢ Test Amount: $${config.priceImpactTestAmount}

üïê System Status:
‚Ä¢ Uptime: ${uptime} minutes
‚Ä¢ Analysis Mode: CoinGecko Top 2000
‚Ä¢ Status: Active üü¢

üí° Next analysis in ~10 minutes`;

    await tg.sendMessage(report);
    
  } catch (error) {
    log(`Error sending activity report: ${error}`, 'ERROR');
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
 */
async function initialize() {
  try {
    log('üöÄ Initializing Solana Signal Bot...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.initialize();
    log('‚úÖ Database initialized');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    diagnostics = new DiagnosticsSystem(db, tg);
    log('‚úÖ Diagnostics system initialized');
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoinGecko API
    log('üß™ Testing CoinGecko API...');
    const testTokens = await coingecko.getTopSolanaTokens(10);
    log(`‚úÖ CoinGecko API working - fetched ${testTokens.length} test tokens`);
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Jupiter API
    log('üß™ Testing Jupiter API...');
    try {
      const testQuote = await jupiter.getQuote(
        'So11111111111111111111111111111111111111112', // SOL
        'EPjFWdd5AufqSSqeM2qA9G4KJ9b9wiG9vG7bG6wGw7bS', // USDC
        100000000 // 0.1 SOL (–º–µ–Ω—å—à–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)
      );
      log(`‚úÖ Jupiter API working - got quote: ${testQuote ? 'success' : 'failed'}`);
    } catch (error) {
      log(`‚ö†Ô∏è Jupiter API test failed: ${error}`, 'WARN');
      log('Jupiter API will be tested during actual token analysis');
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    await tg.sendMessage('üöÄ Solana Signal Bot started!\n\nüìä Analysis Mode: CoinGecko Top 2000\n‚öôÔ∏è Monitoring for buy signals...');
    
    log('‚úÖ Initialization complete');
    
  } catch (error) {
    log(`‚ùå Initialization failed: ${error}`, 'ERROR');
    throw error;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await initialize();
    
    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(runTokenAnalysis, 10 * 60 * 1000);
    
    // –û—Ç—á–µ—Ç –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(sendActivityReport, 30 * 60 * 1000);
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(async () => {
      try {
        await diagnostics.runDiagnostics();
      } catch (error) {
        log(`Diagnostics error: ${error}`, 'ERROR');
      }
    }, 5 * 60 * 1000);
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(runTokenAnalysis, 30 * 1000);
    setTimeout(sendActivityReport, 2 * 60 * 1000); // –ü–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    setTimeout(async () => {
      try {
        await diagnostics.runDiagnostics();
      } catch (error) {
        log(`Initial diagnostics error: ${error}`, 'ERROR');
      }
    }, 30 * 1000);
    
    log('üéØ All systems running - monitoring for signals...');
    
  } catch (error) {
    log(`‚ùå Fatal error: ${error}`, 'ERROR');
    await tg.sendErrorMessage(`Fatal Error: ${error}`);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  log('üõë Received SIGINT, shutting down gracefully...');
  await tg.sendMessage('üõë Solana Signal Bot shutting down...');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  log('üõë Received SIGTERM, shutting down gracefully...');
  await tg.sendMessage('üõë Solana Signal Bot shutting down...');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
main().catch(async (error) => {
  log(`‚ùå Unhandled error: ${error}`, 'ERROR');
  try {
    await tg.sendErrorMessage(`Unhandled Error: ${error}`);
  } catch (e) {
    log(`‚ùå Failed to send error message: ${e}`, 'ERROR');
  }
  process.exit(1);
}); 