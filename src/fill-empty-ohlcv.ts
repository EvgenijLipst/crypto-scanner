// fill-empty-ohlcv.ts - –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å—Ö–µ–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è OHLCV
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å–≤–µ—á–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

import { Database } from './database';
import { log, bucketTs } from './utils';

interface TokenInfo {
  mint: string;
  symbol: string;
  coin_id: string;
}

interface CoingeckoPrice {
  [symbol: string]: {
    usd: number;
    usd_24h_vol?: number;
  };
}

export class OHLCVFiller {
  private database: Database;
  private coingeckoApiKey: string | null;
  private isRunning = false;
  private intervalId: NodeJS.Timeout | null = null;

  constructor(database: Database, coingeckoApiKey?: string) {
    this.database = database;
    this.coingeckoApiKey = coingeckoApiKey || null;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ OHLCV
   */
  start(intervalMinutes: number = 1): void {
    if (this.isRunning) {
      log('‚ö†Ô∏è OHLCV filler is already running');
      return;
    }

    this.isRunning = true;
    log(`üöÄ Starting OHLCV filler with ${intervalMinutes} minute interval`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
    this.fillEmptyCandles();

    // –ó–∞—Ç–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    this.intervalId = setInterval(() => {
      this.fillEmptyCandles();
    }, intervalMinutes * 60 * 1000);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ OHLCV
   */
  stop(): void {
    if (!this.isRunning) {
      log('‚ö†Ô∏è OHLCV filler is not running');
      return;
    }

    this.isRunning = false;
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    log('üõë OHLCV filler stopped');
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Å–≤–µ—á–µ–π
   */
  async fillEmptyCandles(): Promise<void> {
    try {
      log('üîÑ Starting OHLCV fill cycle...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ coin_data
      const tokens = await this.database.getAllTokensFromCoinData('Solana');
      log(`üìä Processing ${tokens.length} tokens from coin_data`);

      if (tokens.length === 0) {
        log('‚ö†Ô∏è No tokens found in coin_data');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π timestamp –¥–ª—è –º–∏–Ω—É—Ç—ã
      const currentMinute = bucketTs(Math.floor(Date.now() / 1000));
      
      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å Coingecko –¥–ª—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
      const prices = await this.fetchPricesFromCoingecko(tokens);
      
      let processedCount = 0;
      let emptyCandlesCreated = 0;
      let priceFetchedCount = 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
      for (const token of tokens) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤–µ—á–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
          const hasCandle = await this.database.hasCandleForPeriod(token.mint, currentMinute);
          
          if (!hasCandle) {
            // –ù–µ—Ç —Å–≤–µ—á–∏ - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é
            let price = 0;
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É –∏–∑ –±–∞–∑—ã
            const lastKnownPrice = await this.database.getLastKnownPrice(token.mint);
            
            if (lastKnownPrice && lastKnownPrice > 0) {
              price = lastKnownPrice;
              log(`üìà Using last known price for ${token.symbol}: $${price}`);
            } else {
              // –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã –≤ –±–∞–∑–µ, –±–µ—Ä–µ–º —Å Coingecko
              const coingeckoPrice = prices[token.symbol.toLowerCase()];
              if (coingeckoPrice && coingeckoPrice.usd > 0) {
                price = coingeckoPrice.usd;
                priceFetchedCount++;
                log(`üåê Using Coingecko price for ${token.symbol}: $${price}`);
              } else {
                log(`‚ö†Ô∏è No price available for ${token.symbol} (${token.mint})`);
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –±–µ–∑ —Ü–µ–Ω—ã
              }
            }

            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å–≤–µ—á—É
            await this.database.createEmptyCandle(token.mint, price, currentMinute);
            emptyCandlesCreated++;
          }
          
          processedCount++;
          
          // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ç–æ–∫–µ–Ω–æ–≤
          if (processedCount % 100 === 0) {
            log(`üìä Processed ${processedCount}/${tokens.length} tokens...`);
          }
          
        } catch (error) {
          log(`‚ùå Error processing token ${token.symbol}: ${error}`, 'ERROR');
        }
      }

      log(`‚úÖ OHLCV fill cycle completed:`);
      log(`   ‚Ä¢ Processed: ${processedCount} tokens`);
      log(`   ‚Ä¢ Empty candles created: ${emptyCandlesCreated}`);
      log(`   ‚Ä¢ Prices fetched from Coingecko: ${priceFetchedCount}`);
      log(`   ‚Ä¢ Current minute timestamp: ${currentMinute}`);

    } catch (error) {
      log(`‚ùå Error in fillEmptyCandles: ${error}`, 'ERROR');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã —Å Coingecko API
   */
  private async fetchPricesFromCoingecko(tokens: TokenInfo[]): Promise<CoingeckoPrice> {
    try {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ 250 (–ª–∏–º–∏—Ç Coingecko API)
      const batchSize = 250;
      const batches = [];
      
      for (let i = 0; i < tokens.length; i += batchSize) {
        batches.push(tokens.slice(i, i + batchSize));
      }

      const allPrices: CoingeckoPrice = {};
      
      for (let i = 0; i < batches.length; i++) {
        const batch = batches[i];
        const symbols = batch.map(t => t.symbol.toLowerCase()).join(',');
        
        log(`üåê Fetching Coingecko prices for batch ${i + 1}/${batches.length} (${batch.length} tokens)`);
        
        try {
          const url = `https://api.coingecko.com/api/v3/simple/price?ids=${symbols}&vs_currencies=usd&include_24hr_vol=true`;
          
          const response = await fetch(url, {
            headers: this.coingeckoApiKey ? {
              'X-CG-API-KEY': this.coingeckoApiKey
            } : {}
          });

          if (!response.ok) {
            const errorText = await response.text();
            log(`‚ùå Coingecko API error (batch ${i + 1}): ${response.status} - ${errorText}`, 'ERROR');
            continue;
          }

          const prices = await response.json();
          Object.assign(allPrices, prices);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã)
          if (i < batches.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
          
        } catch (error) {
          log(`‚ùå Error fetching Coingecko batch ${i + 1}: ${error}`, 'ERROR');
        }
      }

      log(`üåê Successfully fetched prices for ${Object.keys(allPrices).length} tokens from Coingecko`);
      return allPrices;
      
    } catch (error) {
      log(`‚ùå Error in fetchPricesFromCoingecko: ${error}`, 'ERROR');
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã
   */
  getStats(): { isRunning: boolean; lastRun?: number } {
    return {
      isRunning: this.isRunning
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default OHLCVFiller; 