// fix-database-constraints.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const { Pool } = require('pg');
require('dotenv').config();

async function fixDatabaseConstraints() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  });

  try {
    console.log('üîß Fixing database constraints and indexes...');
    
    // 1. –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    try {
      await pool.query(`
        ALTER TABLE coin_data 
        ADD CONSTRAINT coin_data_coin_network_uidx 
        UNIQUE (coin_id, network)
      `);
      console.log('‚úÖ Added unique constraint coin_data_coin_network_uidx');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚úÖ Unique constraint coin_data_coin_network_uidx already exists');
      } else {
        console.log(`‚ö†Ô∏è Error adding unique constraint: ${error.message}`);
      }
    }
    
    // 2. –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      await pool.query(`DROP INDEX IF EXISTS idx_coin_data_updated_at`);
      console.log('‚úÖ Removed incorrect index idx_coin_data_updated_at');
    } catch (error) {
      console.log(`‚ö†Ô∏è Error removing index: ${error.message}`);
    }
    
    // 3. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    try {
      await pool.query(`
        CREATE INDEX IF NOT EXISTS idx_coin_data_network_timestamp 
        ON coin_data (network, timestamp DESC)
      `);
      console.log('‚úÖ Added index idx_coin_data_network_timestamp');
    } catch (error) {
      console.log(`‚ö†Ô∏è Error adding network+timestamp index: ${error.message}`);
    }
    
    try {
      await pool.query(`
        CREATE INDEX IF NOT EXISTS idx_coin_data_timestamp 
        ON coin_data (timestamp DESC)
      `);
      console.log('‚úÖ Added index idx_coin_data_timestamp');
    } catch (error) {
      console.log(`‚ö†Ô∏è Error adding timestamp index: ${error.message}`);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const countResult = await pool.query(`
      SELECT COUNT(*) as count FROM coin_data WHERE network = 'Solana'
    `);
    console.log(`üìä Current tokens in database: ${countResult.rows[0].count}`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–∏–µ —Ç–æ–∫–µ–Ω—ã
    const freshResult = await pool.query(`
      SELECT COUNT(*) as count FROM coin_data 
      WHERE network = 'Solana' 
      AND timestamp > NOW() - INTERVAL '48 hours'
    `);
    console.log(`üìä Fresh tokens (last 48h): ${freshResult.rows[0].count}`);
    
    // 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
    const recentResult = await pool.query(`
      SELECT coin_id, symbol, name, timestamp 
      FROM coin_data 
      WHERE network = 'Solana' 
      ORDER BY timestamp DESC 
      LIMIT 5
    `);
    
    console.log('\nüìã Recent tokens:');
    recentResult.rows.forEach((row, i) => {
      console.log(`${i + 1}. ${row.symbol} (${row.coin_id}) - ${row.timestamp}`);
    });
    
    console.log('\n‚úÖ Database constraints and indexes fixed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error fixing database:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fixDatabaseConstraints().catch(console.error); 