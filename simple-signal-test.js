require('dotenv').config();

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
function testSignalCriteria() {
  console.log('üîç Testing signal criteria...');
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
  const testTokenData = {
    volumeSpike: 2.5,  // –±–æ–ª—å—à–µ 2 ‚úÖ
    rsi: 42,           // –º–µ–Ω—å—à–µ 45 ‚úÖ
    emaBull: true,     // ‚úÖ
    netFlow: 1.8,      // –±–æ–ª—å—à–µ 1.5 ‚úÖ
    uniqueBuyers: 4,   // –±–æ–ª—å—à–µ 3 ‚úÖ
    avgVol60m: 1500,   // –±–æ–ª—å—à–µ 1000 ‚úÖ
    poolAgeOk: true,
    hasUsdcOrSol: true
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
  const volumeOk = testTokenData.volumeSpike >= 2;
  const rsiOk = testTokenData.rsi < 45;
  const emaOk = testTokenData.emaBull;
  const flowOk = testTokenData.netFlow >= 1.5;
  const buyersOk = testTokenData.uniqueBuyers >= 3;
  const volOk = testTokenData.avgVol60m >= 1000;
  
  const criteriaMet = [volumeOk, rsiOk, emaOk, flowOk, buyersOk, volOk].filter(Boolean).length;
  
  console.log('\nüìä Signal criteria analysis:');
  console.log(`‚Ä¢ Volume Spike: ${testTokenData.volumeSpike}x ${volumeOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`‚Ä¢ RSI: ${testTokenData.rsi} ${rsiOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`‚Ä¢ EMA Bull: ${testTokenData.emaBull ? '‚úÖ' : '‚ùå'}`);
  console.log(`‚Ä¢ Net Flow: ${testTokenData.netFlow} ${flowOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`‚Ä¢ Unique Buyers: ${testTokenData.uniqueBuyers} ${buyersOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`‚Ä¢ Volume: $${testTokenData.avgVol60m} ${volOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`\nüéØ Criteria met: ${criteriaMet}/6`);
  
  const shouldSignal = criteriaMet >= 2 && testTokenData.poolAgeOk && testTokenData.hasUsdcOrSol;
  
  console.log(`\nüöÄ Should generate signal: ${shouldSignal ? '‚úÖ YES' : '‚ùå NO'}`);
  
  if (shouldSignal) {
    console.log('‚úÖ With the new relaxed criteria, this token would generate a signal!');
  } else {
    console.log('‚ùå Even with relaxed criteria, this token would not generate a signal.');
  }
  
  return shouldSignal;
}

// –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
function testMultipleScenarios() {
  console.log('\nüß™ Testing multiple scenarios...\n');
  
  const scenarios = [
    {
      name: 'High Volume Token',
      data: { volumeSpike: 3.5, rsi: 50, emaBull: false, netFlow: 1.2, uniqueBuyers: 2, avgVol60m: 800 }
    },
    {
      name: 'Low RSI Token',
      data: { volumeSpike: 1.5, rsi: 35, emaBull: true, netFlow: 2.1, uniqueBuyers: 5, avgVol60m: 1200 }
    },
    {
      name: 'Balanced Token',
      data: { volumeSpike: 2.2, rsi: 40, emaBull: true, netFlow: 1.6, uniqueBuyers: 3, avgVol60m: 1100 }
    },
    {
      name: 'Poor Token',
      data: { volumeSpike: 1.1, rsi: 60, emaBull: false, netFlow: 0.8, uniqueBuyers: 1, avgVol60m: 500 }
    }
  ];
  
  let signalsGenerated = 0;
  
  scenarios.forEach((scenario, index) => {
    console.log(`\n--- Scenario ${index + 1}: ${scenario.name} ---`);
    
    const data = { ...scenario.data, poolAgeOk: true, hasUsdcOrSol: true };
    
    const volumeOk = data.volumeSpike >= 2;
    const rsiOk = data.rsi < 45;
    const emaOk = data.emaBull;
    const flowOk = data.netFlow >= 1.5;
    const buyersOk = data.uniqueBuyers >= 3;
    const volOk = data.avgVol60m >= 1000;
    
    const criteriaMet = [volumeOk, rsiOk, emaOk, flowOk, buyersOk, volOk].filter(Boolean).length;
    const shouldSignal = criteriaMet >= 2 && data.poolAgeOk && data.hasUsdcOrSol;
    
    console.log(`Criteria met: ${criteriaMet}/6`);
    console.log(`Signal: ${shouldSignal ? '‚úÖ YES' : '‚ùå NO'}`);
    
    if (shouldSignal) signalsGenerated++;
  });
  
  console.log(`\nüìä Summary: ${signalsGenerated}/${scenarios.length} scenarios would generate signals`);
  console.log(`üìà Success rate: ${((signalsGenerated / scenarios.length) * 100).toFixed(1)}%`);
  
  if (signalsGenerated > 0) {
    console.log('\n‚úÖ The relaxed criteria are working! Some tokens would generate signals.');
  } else {
    console.log('\n‚ö†Ô∏è Still no signals. Criteria may need further relaxation.');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testSignalCriteria();
testMultipleScenarios(); 