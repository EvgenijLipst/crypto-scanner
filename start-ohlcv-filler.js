#!/usr/bin/env node

// start-ohlcv-filler.js - –ó–∞–ø—É—Å–∫ OHLCV filler
// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ö–µ–º—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è OHLCV –¥–ª—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤

require('dotenv').config();
const { Database } = require('./src/database');
const { OHLCVFiller } = require('./src/fill-empty-ohlcv');
const { log } = require('./src/utils');

async function main() {
  try {
    log('üöÄ Starting OHLCV Filler...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const databaseUrl = process.env.DATABASE_URL;
    if (!databaseUrl) {
      throw new Error('DATABASE_URL environment variable is required');
    }
    
    const coingeckoApiKey = process.env.COINGECKO_API_KEY || null;
    const intervalMinutes = parseInt(process.env.OHLCV_FILL_INTERVAL_MINUTES) || 1;
    
    log(`üìä Configuration:`);
    log(`   ‚Ä¢ Database: ${databaseUrl.replace(/\/\/.*:.*@/, '//[credentials]@')}`);
    log(`   ‚Ä¢ Coingecko API Key: ${coingeckoApiKey ? '‚úÖ Set' : '‚ùå Not set (using free tier)'}`);
    log(`   ‚Ä¢ Fill interval: ${intervalMinutes} minutes`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    log('üîå Connecting to database...');
    const database = new Database(databaseUrl);
    await database.initialize();
    log('‚úÖ Database connected and initialized');
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º OHLCV filler
    log('üìà Creating OHLCV filler...');
    const ohlcvFiller = new OHLCVFiller(database, coingeckoApiKey);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
    ohlcvFiller.start(intervalMinutes);
    
    log('‚úÖ OHLCV filler started successfully');
    log('üìä The filler will now:');
    log('   ‚Ä¢ Process all tokens from coin_data table');
    log('   ‚Ä¢ Create empty candles for tokens without trading activity');
    log('   ‚Ä¢ Fetch prices from Coingecko when needed');
    log('   ‚Ä¢ Run every ' + intervalMinutes + ' minute(s)');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', async () => {
      log('\nüõë Received SIGINT, shutting down...');
      ohlcvFiller.stop();
      await database.close();
      log('‚úÖ OHLCV filler stopped gracefully');
      process.exit(0);
    });
    
    process.on('SIGTERM', async () => {
      log('\nüõë Received SIGTERM, shutting down...');
      ohlcvFiller.stop();
      await database.close();
      log('‚úÖ OHLCV filler stopped gracefully');
      process.exit(0);
    });
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ
    setInterval(() => {
      const stats = ohlcvFiller.getStats();
      log(`üìä OHLCV filler status: ${stats.isRunning ? 'üü¢ Running' : 'üî¥ Stopped'}`);
    }, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    
  } catch (error) {
    log(`‚ùå Fatal error: ${error}`, 'ERROR');
    log(`‚ùå Stack trace: ${error.stack}`, 'ERROR');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(error => {
  log(`‚ùå Unhandled error: ${error}`, 'ERROR');
  process.exit(1);
}); 