#!/usr/bin/env node

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node read-diagnostics.js [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–ø–∏—Å–µ–π]

const fs = require('fs');
const path = require('path');

const DIAGNOSTICS_LOG = path.join(__dirname, 'diagnostics.log');
const TELEGRAM_LOG = path.join(__dirname, 'telegram.log');
const DEFAULT_ENTRIES = 10;

function readDiagnosticsLogs(limit = DEFAULT_ENTRIES) {
  console.log('üîß === SYSTEM DIAGNOSTICS REPORT === üîß\n');
  
  // –ß–∏—Ç–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏
  if (fs.existsSync(DIAGNOSTICS_LOG)) {
    try {
      const content = fs.readFileSync(DIAGNOSTICS_LOG, 'utf8');
      const lines = content.trim().split('\n').filter(line => line.length > 0);
      
      if (lines.length > 0) {
        console.log(`üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${Math.min(limit, lines.length)} –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π:\n`);
        
        const recentLines = lines.slice(-limit);
        recentLines.forEach((line, index) => {
          try {
            const entry = JSON.parse(line);
            const statusIcon = entry.status === 'HEALTHY' ? 'üü¢' : 
                             entry.status === 'WARNING' ? 'üü°' : 'üî¥';
            
            console.log(`${statusIcon} [${new Date(entry.timestamp).toLocaleString()}] ${entry.status}`);
            console.log(`   üìä Issues: ${entry.issuesCount} | Errors: ${entry.metrics?.telegramErrors || 0}`);
            
            if (entry.issues && entry.issues.length > 0) {
              console.log('   üîç Issues:');
              entry.issues.forEach(issue => {
                const severityIcon = issue.severity === 'CRITICAL' ? 'üö®' :
                                   issue.severity === 'HIGH' ? '‚ö†Ô∏è' :
                                   issue.severity === 'MEDIUM' ? '‚ö°' : '‚ÑπÔ∏è';
                console.log(`      ${severityIcon} ${issue.issue} (${issue.severity})`);
              });
            }
            console.log('');
          } catch (e) {
            console.log(`‚ùå Malformed log entry: ${line.substring(0, 100)}...`);
          }
        });
      } else {
        console.log('üìù –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏ –ø—É—Å—Ç—ã–µ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤:', error.message);
    }
  } else {
    console.log('‚ùå –§–∞–π–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  console.log('\n' + '='.repeat(60) + '\n');
  
  // –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ Telegram
  if (fs.existsSync(TELEGRAM_LOG)) {
    try {
      const content = fs.readFileSync(TELEGRAM_LOG, 'utf8');
      const lines = content.trim().split('\n').filter(line => line.length > 0);
      const errorLines = lines.filter(line => line.includes('[ERROR]')).slice(-10);
      
      if (errorLines.length > 0) {
        console.log(`üì± –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${errorLines.length} –æ—à–∏–±–æ–∫ Telegram:\n`);
        
        errorLines.forEach((line, index) => {
          const parts = line.match(/^\[([^\]]+)\] \[([^\]]+)\] (.+)$/);
          if (parts) {
            const [, timestamp, status, message] = parts;
            const time = new Date(timestamp).toLocaleTimeString();
            console.log(`‚ùå [${time}] ${message.substring(0, 150)}${message.length > 150 ? '...' : ''}`);
          }
        });
        console.log('');
      } else {
        console.log('‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ Telegram –ª–æ–≥–∞—Ö');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Telegram –ª–æ–≥–æ–≤:', error.message);
    }
  } else {
    console.log('‚ùå –§–∞–π–ª Telegram –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

function analyzePatterns() {
  console.log('\nüîç === PATTERN ANALYSIS === üîç\n');
  
  if (!fs.existsSync(TELEGRAM_LOG)) {
    console.log('‚ùå Telegram –ª–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    return;
  }
  
  try {
    const content = fs.readFileSync(TELEGRAM_LOG, 'utf8');
    const lines = content.trim().split('\n').filter(line => line.length > 0);
    const errorLines = lines.filter(line => line.includes('[ERROR]'));
    
    // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫
    const patterns = {};
    errorLines.forEach(line => {
      if (line.includes('token_mint')) patterns['token_mint'] = (patterns['token_mint'] || 0) + 1;
      if (line.includes('Connection terminated')) patterns['connection'] = (patterns['connection'] || 0) + 1;
      if (line.includes('Database pool error')) patterns['database'] = (patterns['database'] || 0) + 1;
      if (line.includes('timeout')) patterns['timeout'] = (patterns['timeout'] || 0) + 1;
    });
    
    if (Object.keys(patterns).length > 0) {
      console.log('üìà –ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫:');
      Object.entries(patterns).forEach(([pattern, count]) => {
        const icon = count > 10 ? 'üö®' : count > 5 ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
        console.log(`   ${icon} ${pattern}: ${count} —Ä–∞–∑`);
      });
    } else {
      console.log('‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', error.message);
  }
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];
const entries = args[1] ? parseInt(args[1]) : DEFAULT_ENTRIES;

if (command === 'patterns') {
  analyzePatterns();
} else {
  const limit = command ? parseInt(command) : entries;
  if (isNaN(limit) || limit <= 0) {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
    console.log('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node read-diagnostics.js [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]  - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    console.log('  node read-diagnostics.js patterns      - –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫');
    process.exit(1);
  }
  readDiagnosticsLogs(limit);
} 