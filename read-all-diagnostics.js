const fs = require('fs');
const path = require('path');

const LOG_FILES = {
  'signal-bot': 'diagnostics.log',
  'tradebot': 'tradebot-diagnostics.log',
  'telegram': 'telegram.log'
};

function readAllDiagnostics() {
  console.log('üîß === –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ü–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï –°–ò–°–¢–ï–ú–´ === üîß\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –ª–æ–≥–æ–≤
  Object.entries(LOG_FILES).forEach(([component, filename]) => {
    console.log(`üìã === ${component.toUpperCase()} === üìã`);
    
    if (!fs.existsSync(filename)) {
      console.log(`‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω\n`);
      return;
    }

    try {
      const content = fs.readFileSync(filename, 'utf8');
      const lines = content.trim().split('\n').filter(line => line.length > 0);
      
      if (lines.length === 0) {
        console.log(`üìã –§–∞–π–ª ${filename} –ø—É—Å—Ç\n`);
        return;
      }

      console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${lines.length}`);

      if (component === 'telegram') {
        // –î–ª—è Telegram –ª–æ–≥–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const recentLines = lines.slice(-5);
        console.log('üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π:');
        recentLines.forEach(line => {
          console.log(`   ${line}`);
        });
      } else {
        // –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤ - –ø–∞—Ä—Å–∏–º JSON
        const recentLines = lines.slice(-3);
        console.log('üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø—Ä–æ–≤–µ—Ä–∫–∏:');
        
        recentLines.forEach((line, index) => {
          try {
            const entry = JSON.parse(line);
            const timestamp = new Date(entry.timestamp).toLocaleString();
            const statusIcon = entry.status === 'HEALTHY' ? '‚úÖ' : 
                              entry.status === 'WARNING' ? '‚ö†Ô∏è' : 'üö®';
            
            console.log(`   ${statusIcon} [${timestamp}] ${entry.status} (${entry.issuesCount} –ø—Ä–æ–±–ª–µ–º)`);
            
            if (entry.issuesCount > 0) {
              entry.issues.slice(0, 2).forEach(issue => {
                const severityIcon = issue.severity === 'CRITICAL' ? 'üö®' : 
                                   issue.severity === 'HIGH' ? '‚ö†Ô∏è' : 
                                   issue.severity === 'MEDIUM' ? 'üü°' : 'üîµ';
                console.log(`      ${severityIcon} ${issue.issue}`);
              });
            }
          } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø–∏—Å–∏: ${error.message}`);
          }
        });
      }
      
      console.log('');
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filename}: ${error.message}\n`);
    }
  });

  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('üìä === –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê === üìä');
  
  let totalHealthyChecks = 0;
  let totalWarningChecks = 0;
  let totalCriticalChecks = 0;
  let totalChecks = 0;

  ['diagnostics.log', 'tradebot-diagnostics.log'].forEach(filename => {
    if (fs.existsSync(filename)) {
      try {
        const content = fs.readFileSync(filename, 'utf8');
        const lines = content.trim().split('\n').filter(line => line.length > 0);
        
        lines.forEach(line => {
          try {
            const entry = JSON.parse(line);
            totalChecks++;
            if (entry.status === 'HEALTHY') totalHealthyChecks++;
            else if (entry.status === 'WARNING') totalWarningChecks++;
            else if (entry.status === 'CRITICAL') totalCriticalChecks++;
          } catch {}
        });
      } catch {}
    }
  });

  if (totalChecks > 0) {
    console.log(`‚úÖ –ó–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${totalHealthyChecks} (${((totalHealthyChecks/totalChecks)*100).toFixed(1)}%)`);
    console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${totalWarningChecks} (${((totalWarningChecks/totalChecks)*100).toFixed(1)}%)`);
    console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: ${totalCriticalChecks} (${((totalCriticalChecks/totalChecks)*100).toFixed(1)}%)`);
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${totalChecks}`);
  } else {
    console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  const now = Date.now();
  let lastActivityTime = 0;
  
  Object.values(LOG_FILES).forEach(filename => {
    if (fs.existsSync(filename)) {
      try {
        const stats = fs.statSync(filename);
        lastActivityTime = Math.max(lastActivityTime, stats.mtime.getTime());
      } catch {}
    }
  });

  if (lastActivityTime > 0) {
    const minutesAgo = Math.floor((now - lastActivityTime) / (1000 * 60));
    console.log(`\nüïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
    
    if (minutesAgo > 10) {
      console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ª–æ–≥–æ–≤ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
readAllDiagnostics(); 