const { spawn } = require('child_process');
const fs = require('fs');

class RailwayLogsMonitor {
    constructor() {
        this.processes = new Map();
        this.isRunning = false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Railway CLI
    async checkRailwayCLI() {
        return new Promise((resolve) => {
            const check = spawn('railway', ['--version']);
            check.on('close', (code) => {
                resolve(code === 0);
            });
            check.on('error', () => {
                resolve(false);
            });
        });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    async getServices() {
        return new Promise((resolve, reject) => {
            const railway = spawn('railway', ['service', 'list']);
            let output = '';
            
            railway.stdout.on('data', (data) => {
                output += data.toString();
            });
            
            railway.on('close', (code) => {
                if (code === 0) {
                    // –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
                    const services = this.parseServices(output);
                    resolve(services);
                } else {
                    reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤'));
                }
            });
            
            railway.on('error', (error) => {
                reject(error);
            });
        });
    }

    parseServices(output) {
        const lines = output.split('\n');
        const services = [];
        
        for (const line of lines) {
            // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç ID)
            if (line.includes('‚îÇ') && line.length > 10) {
                const parts = line.split('‚îÇ').map(p => p.trim()).filter(p => p);
                if (parts.length >= 2) {
                    services.push({
                        id: parts[0],
                        name: parts[1] || parts[0]
                    });
                }
            }
        }
        
        return services;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    startServiceLogs(service) {
        console.log(`üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –¥–ª—è ${service.name} (${service.id})`);
        
        const railway = spawn('railway', ['logs', '--service', service.id, '--follow']);
        
        railway.stdout.on('data', (data) => {
            const logs = data.toString();
            this.processLogs(service, logs);
        });
        
        railway.stderr.on('data', (data) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ ${service.name}: ${data}`);
        });
        
        railway.on('close', (code) => {
            console.log(`üîå –õ–æ–≥–∏ ${service.name} –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –∫–æ–¥–æ–º ${code}`);
            this.processes.delete(service.id);
        });
        
        railway.on('error', (error) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ª–æ–≥–æ–≤ ${service.name}:`, error.message);
        });
        
        this.processes.set(service.id, railway);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    processLogs(service, logs) {
        const lines = logs.split('\n').filter(line => line.trim());
        
        for (const line of lines) {
            const timestamp = new Date().toLocaleString('ru-RU');
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if (this.isImportantLog(line)) {
                console.log(`üî• [${service.name}] ${timestamp}: ${line}`);
            }
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è WebSocket —Å–æ–±—ã—Ç–∏–π
            if (line.includes('[WS POOL') || line.includes('pool') || line.includes('Pool')) {
                console.log(`üèä [${service.name} POOL] ${timestamp}: ${line}`);
            }
            
            // –û—à–∏–±–∫–∏
            if (line.toLowerCase().includes('error') || line.toLowerCase().includes('–æ—à–∏–±–∫–∞')) {
                console.log(`‚ùå [${service.name} ERROR] ${timestamp}: ${line}`);
            }
            
            // OHLCV —Å–æ–±—ã—Ç–∏—è
            if (line.includes('OHLCV') || line.includes('candle') || line.includes('—Å–≤–µ—á–∞')) {
                console.log(`üìà [${service.name} OHLCV] ${timestamp}: ${line}`);
            }
            
            // –û–±—ã—á–Ω—ã–µ –ª–æ–≥–∏ (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –µ—Å–ª–∏ –º–Ω–æ–≥–æ)
            // console.log(`üìã [${service.name}] ${timestamp}: ${line}`);
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –ª–æ–≥–∏
    isImportantLog(line) {
        const importantKeywords = [
            'pool', 'Pool', 'POOL',
            'initialize', 'init', '—Å–æ–∑–¥–∞–Ω',
            'WebSocket', 'WS',
            '–Ω–æ–≤—ã–π', 'new',
            '–ø–æ–¥–∫–ª—é—á–µ–Ω', 'connected',
            '–æ—Ç–∫–ª—é—á–µ–Ω', 'disconnected',
            '–∑–∞–ø—É—Å–∫', 'start',
            '–æ—Å—Ç–∞–Ω–æ–≤–∫–∞', 'stop'
        ];
        
        return importantKeywords.some(keyword => 
            line.toLowerCase().includes(keyword.toLowerCase())
        );
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    async startMonitoring() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway CLI...');
        
        const hasRailway = await this.checkRailwayCLI();
        if (!hasRailway) {
            console.error('‚ùå Railway CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            console.log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g @railway/cli');
            console.log('–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: railway login');
            return;
        }
        
        console.log('‚úÖ Railway CLI –Ω–∞–π–¥–µ–Ω');
        console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...');
        
        try {
            const services = await this.getServices();
            
            if (services.length === 0) {
                console.log('‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${services.length} —Å–µ—Ä–≤–∏—Å–æ–≤:`);
            services.forEach(service => {
                console.log(`  - ${service.name} (${service.id})`);
            });
            
            console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤...');
            console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            for (const service of services) {
                this.startServiceLogs(service);
            }
            
            this.isRunning = true;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            process.on('SIGINT', () => {
                this.stopMonitoring();
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    stopMonitoring() {
        console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤...');
        
        for (const [serviceId, process] of this.processes) {
            console.log(`üîå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ${serviceId}...`);
            process.kill();
        }
        
        this.processes.clear();
        this.isRunning = false;
        
        console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Railway API (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
class RailwayAPIMonitor {
    constructor(token) {
        this.token = token;
        this.baseURL = 'https://backboard.railway.app/graphql';
    }

    async getProjects() {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Railway GraphQL API
        // –ù—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        console.log('üîç Railway API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω)');
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
async function main() {
    const args = process.argv.slice(2);
    
    if (args.length > 0 && args[0] === 'api') {
        const token = args[1];
        if (!token) {
            console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω Railway API');
            console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node railway-logs-monitor.js api YOUR_TOKEN');
            return;
        }
        
        const apiMonitor = new RailwayAPIMonitor(token);
        await apiMonitor.getProjects();
    } else {
        const monitor = new RailwayLogsMonitor();
        await monitor.startMonitoring();
    }
}

if (require.main === module) {
    main();
}

module.exports = { RailwayLogsMonitor, RailwayAPIMonitor }; 