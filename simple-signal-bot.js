require('dotenv').config();

const { TokenAnalyzer } = require('./src/token-analyzer');
const { Database } = require('./src/database');
const { TelegramBot } = require('./src/telegram');
const { CoinGeckoAPI } = require('./src/coingecko');
const { JupiterAPI } = require('./src/jupiter');

class SimpleSignalBot {
  constructor() {
    this.db = null;
    this.tg = null;
    this.coingecko = null;
    this.jupiter = null;
    this.tokenAnalyzer = null;
    
    this.isRunning = false;
    this.tokensCache = [];
    this.lastTokenRefresh = 0;
    this.tokenRefreshInterval = 12 * 60 * 60 * 1000; // 12 —á–∞—Å–æ–≤
    
    this.analysisInterval = 5 * 60 * 1000; // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.batchSize = 20; // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ 20 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Ä–∞–∑
    this.currentBatchIndex = 0;
    
    this.stats = {
      tokensAnalyzed: 0,
      signalsGenerated: 0,
      lastSignalTime: null,
      startTime: Date.now()
    };
  }

  async initialize() {
    console.log('üöÄ Initializing Simple Signal Bot...');
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      this.db = new Database(process.env.DATABASE_URL);
      await this.db.initialize();
      console.log('‚úÖ Database connected');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
      this.tg = new TelegramBot(process.env.TELEGRAM_TOKEN, process.env.TELEGRAM_CHAT_ID);
      console.log('‚úÖ Telegram bot initialized');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CoinGecko API
      this.coingecko = new CoinGeckoAPI(process.env.COINGECKO_API_KEY);
      console.log('‚úÖ CoinGecko API initialized');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Jupiter API
      this.jupiter = new JupiterAPI();
      console.log('‚úÖ Jupiter API initialized');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
      this.tokenAnalyzer = new TokenAnalyzer(this.coingecko, this.jupiter, this.db, {
        minVolumeSpike: 2,
        maxRsiOversold: 45,
        minLiquidityUsd: 5000,
        maxPriceImpactPercent: 5
      });
      console.log('‚úÖ Token analyzer initialized');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
      await this.tg.sendMessage(`üöÄ **Simple Signal Bot Started!**\n\n` +
        `üìä **Configuration:**\n` +
        `‚Ä¢ Monitoring: Top 2000 CoinGecko tokens\n` +
        `‚Ä¢ Analysis interval: 5 minutes\n` +
        `‚Ä¢ Batch size: 20 tokens\n` +
        `‚Ä¢ Token refresh: 12 hours\n\n` +
        `üéØ **Signal Criteria:**\n` +
        `‚Ä¢ Volume spike: ‚â•2x\n` +
        `‚Ä¢ RSI: <45\n` +
        `‚Ä¢ Min liquidity: $5K\n` +
        `‚Ä¢ Need 2+ criteria met\n\n` +
        `‚è∞ Started at: ${new Date().toLocaleString()}`);
      
      console.log('‚úÖ Simple Signal Bot initialized successfully');
      
    } catch (error) {
      console.error('‚ùå Initialization failed:', error);
      throw error;
    }
  }

  async refreshTokens() {
    try {
      console.log('üîÑ Refreshing top 2000 tokens from CoinGecko...');
      
      const tokens = await this.tokenAnalyzer.getTopTokensForMonitoring();
      
      if (tokens.length > 0) {
        this.tokensCache = tokens;
        this.lastTokenRefresh = Date.now();
        this.currentBatchIndex = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –±–∞—Ç—á–∞
        
        console.log(`‚úÖ Loaded ${tokens.length} tokens for monitoring`);
        
        await this.tg.sendMessage(`üîÑ **Token Refresh Complete**\n\n` +
          `üìä **Statistics:**\n` +
          `‚Ä¢ Total tokens loaded: ${tokens.length}\n` +
          `‚Ä¢ Source: ${tokens.length > 1500 ? 'CoinGecko API' : 'Database cache'}\n` +
          `‚Ä¢ Next refresh: ${new Date(Date.now() + this.tokenRefreshInterval).toLocaleString()}\n\n` +
          `üéØ **Ready for signal analysis!**`);
        
      } else {
        console.log('‚ö†Ô∏è No tokens loaded, keeping existing cache');
      }
      
    } catch (error) {
      console.error('‚ùå Error refreshing tokens:', error);
      await this.tg.sendMessage(`‚ùå **Token Refresh Failed**\n\n` +
        `Error: ${error.message}\n\n` +
        `Will retry on next cycle.`);
    }
  }

  async analyzeTokenBatch() {
    if (this.tokensCache.length === 0) {
      console.log('‚ö†Ô∏è No tokens in cache, skipping analysis');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á —Ç–æ–∫–µ–Ω–æ–≤
      const startIndex = this.currentBatchIndex;
      const endIndex = Math.min(startIndex + this.batchSize, this.tokensCache.length);
      const batch = this.tokensCache.slice(startIndex, endIndex);
      
      console.log(`üîç Analyzing batch ${Math.floor(startIndex / this.batchSize) + 1}: tokens ${startIndex + 1}-${endIndex} of ${this.tokensCache.length}`);
      
      let signalsInBatch = 0;
      
      for (const token of batch) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
          const candles = await this.db.getCandles(token.mint, 40);
          
          if (candles.length < 30) {
            continue; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
          }
          
          // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ OHLCV –¥–∞–Ω–Ω—ã—Ö
          const result = await this.analyzeTokenForSignal(token, candles);
          
          this.stats.tokensAnalyzed++;
          
          if (result.isSignal) {
            signalsInBatch++;
            this.stats.signalsGenerated++;
            this.stats.lastSignalTime = new Date();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É
            await this.db.createSignal(
              token.mint,
              true, // is_buy
              result.data.volumeSpike || 0,
              result.data.rsi || 0
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await this.sendSignalNotification(token, result);
            
            console.log(`üöÄ SIGNAL: ${token.symbol} (${token.mint})`);
          }
          
        } catch (error) {
          console.error(`‚ùå Error analyzing ${token.symbol}:`, error.message);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∞—Ç—á—É
      this.currentBatchIndex = endIndex;
      
      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
      if (this.currentBatchIndex >= this.tokensCache.length) {
        this.currentBatchIndex = 0;
        console.log('üîÑ Completed full cycle, starting over');
      }
      
      console.log(`‚úÖ Batch analysis complete: ${signalsInBatch} signals generated`);
      
    } catch (error) {
      console.error('‚ùå Error in batch analysis:', error);
    }
  }

  async analyzeTokenForSignal(token, candles) {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
    const recentCandles = candles.slice(-30); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
    const closes = recentCandles.map(c => Number(c.c));
    const volumes = recentCandles.map(c => Number(c.v));
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    const currentPrice = closes[closes.length - 1];
    const avgPrice = closes.reduce((a, b) => a + b, 0) / closes.length;
    const priceChange = ((currentPrice - avgPrice) / avgPrice) * 100;
    
    // Volume spike
    const recentVolume = volumes.slice(-5).reduce((a, b) => a + b, 0);
    const avgVolume = volumes.slice(-20, -5).reduce((a, b) => a + b, 0) / 15;
    const volumeSpike = avgVolume > 0 ? recentVolume / (avgVolume * 5) : 0;
    
    // –ü—Ä–æ—Å—Ç–æ–π RSI
    const gains = [];
    const losses = [];
    for (let i = 1; i < closes.length; i++) {
      const change = closes[i] - closes[i - 1];
      if (change > 0) {
        gains.push(change);
        losses.push(0);
      } else {
        gains.push(0);
        losses.push(Math.abs(change));
      }
    }
    const avgGain = gains.slice(-14).reduce((a, b) => a + b, 0) / 14;
    const avgLoss = losses.slice(-14).reduce((a, b) => a + b, 0) / 14;
    const rsi = avgLoss === 0 ? 100 : 100 - (100 / (1 + (avgGain / avgLoss)));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
    const volumeOk = volumeSpike >= 2;
    const rsiOk = rsi < 45;
    const priceOk = priceChange > -5 && priceChange < 10; // –ù–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    const liquidityOk = token.volume24h >= 5000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
    
    const criteriaMet = [volumeOk, rsiOk, priceOk, liquidityOk].filter(Boolean).length;
    const isSignal = criteriaMet >= 2;
    
    const reasons = [];
    if (volumeOk) reasons.push(`Volume spike: ${volumeSpike.toFixed(2)}x`);
    if (rsiOk) reasons.push(`RSI: ${rsi.toFixed(1)}`);
    if (priceOk) reasons.push(`Price change: ${priceChange.toFixed(2)}%`);
    if (liquidityOk) reasons.push(`Volume 24h: $${token.volume24h.toLocaleString()}`);
    
    return {
      isSignal,
      reasons,
      data: {
        volumeSpike,
        rsi,
        priceChange,
        volume24h: token.volume24h
      }
    };
  }

  async sendSignalNotification(token, result) {
    const message = `üöÄ **BUY SIGNAL DETECTED** üöÄ\n\n` +
      `üíé **${token.symbol}** (${token.name})\n` +
      `üìç Mint: \`${token.mint}\`\n\n` +
      `üìä **Analysis:**\n` +
      `‚Ä¢ Volume Spike: ${result.data.volumeSpike.toFixed(2)}x\n` +
      `‚Ä¢ RSI: ${result.data.rsi.toFixed(1)}\n` +
      `‚Ä¢ Price Change: ${result.data.priceChange.toFixed(2)}%\n` +
      `‚Ä¢ Volume 24h: $${result.data.volume24h.toLocaleString()}\n\n` +
      `üí° **Reasons:** ${result.reasons.join(', ')}\n\n` +
      `üîó **Links:**\n` +
      `[üìä Birdeye](https://birdeye.so/token/${token.mint})\n` +
      `[üìà DEXScreener](https://dexscreener.com/solana/${token.mint})\n\n` +
      `‚è∞ ${new Date().toLocaleString()}`;
    
    await this.tg.sendMessage(message);
  }

  async sendStatusReport() {
    const uptime = Date.now() - this.stats.startTime;
    const uptimeHours = Math.floor(uptime / (1000 * 60 * 60));
    const uptimeMinutes = Math.floor((uptime % (1000 * 60 * 60)) / (1000 * 60));
    
    const message = `üìä **Signal Bot Status Report**\n\n` +
      `‚è±Ô∏è **Uptime:** ${uptimeHours}h ${uptimeMinutes}m\n` +
      `üìà **Statistics:**\n` +
      `‚Ä¢ Tokens analyzed: ${this.stats.tokensAnalyzed.toLocaleString()}\n` +
      `‚Ä¢ Signals generated: ${this.stats.signalsGenerated}\n` +
      `‚Ä¢ Last signal: ${this.stats.lastSignalTime ? this.stats.lastSignalTime.toLocaleString() : 'None'}\n\n` +
      `üîÑ **Current Status:**\n` +
      `‚Ä¢ Tokens in cache: ${this.tokensCache.length}\n` +
      `‚Ä¢ Current batch: ${Math.floor(this.currentBatchIndex / this.batchSize) + 1}\n` +
      `‚Ä¢ Next token refresh: ${new Date(this.lastTokenRefresh + this.tokenRefreshInterval).toLocaleString()}\n\n` +
      `‚úÖ **Bot is running smoothly!**`;
    
    await this.tg.sendMessage(message);
  }

  async start() {
    console.log('üöÄ Starting Simple Signal Bot...');
    
    try {
      await this.initialize();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      await this.refreshTokens();
      
      this.isRunning = true;
      
      // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
      const analysisLoop = async () => {
        while (this.isRunning) {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
            if (Date.now() - this.lastTokenRefresh > this.tokenRefreshInterval) {
              await this.refreshTokens();
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á —Ç–æ–∫–µ–Ω–æ–≤
            await this.analyzeTokenBatch();
            
            // –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            await new Promise(resolve => setTimeout(resolve, this.analysisInterval));
            
          } catch (error) {
            console.error('‚ùå Error in analysis loop:', error);
            await new Promise(resolve => setTimeout(resolve, 60000)); // –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
          }
        }
      };
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
      analysisLoop();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
      setInterval(async () => {
        try {
          await this.sendStatusReport();
        } catch (error) {
          console.error('‚ùå Error sending status report:', error);
        }
      }, 6 * 60 * 60 * 1000);
      
      console.log('‚úÖ Simple Signal Bot started successfully!');
      
    } catch (error) {
      console.error('‚ùå Failed to start bot:', error);
      process.exit(1);
    }
  }

  async stop() {
    console.log('üõë Stopping Simple Signal Bot...');
    this.isRunning = false;
    
    await this.tg.sendMessage(`üõë **Signal Bot Stopped**\n\n` +
      `üìä **Final Statistics:**\n` +
      `‚Ä¢ Tokens analyzed: ${this.stats.tokensAnalyzed.toLocaleString()}\n` +
      `‚Ä¢ Signals generated: ${this.stats.signalsGenerated}\n\n` +
      `‚è∞ Stopped at: ${new Date().toLocaleString()}`);
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function main() {
  const bot = new SimpleSignalBot();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', async () => {
    console.log('\nüõë Received SIGINT, stopping bot...');
    await bot.stop();
    process.exit(0);
  });
  
  process.on('SIGTERM', async () => {
    console.log('\nüõë Received SIGTERM, stopping bot...');
    await bot.stop();
    process.exit(0);
  });
  
  await bot.start();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = SimpleSignalBot; 