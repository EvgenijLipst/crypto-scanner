// test-token-saving.js - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
const { Database } = require('./src/database');
const { CoinGeckoAPI } = require('./src/coingecko');
const { log } = require('./src/utils');
require('dotenv').config();

async function testTokenSaving() {
  const db = new Database(process.env.DATABASE_URL);
  const coingecko = new CoinGeckoAPI(process.env.COINGECKO_API_KEY);
  
  try {
    console.log('üß™ Testing token saving mechanism...');
    
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.initialize();
    console.log('‚úÖ Database initialized');
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    console.log('üì° Fetching test tokens from CoinGecko...');
    const tokens = await coingecko.getTopSolanaTokens(10);
    console.log(`üìä Received ${tokens.length} tokens from CoinGecko`);
    
    if (tokens.length === 0) {
      console.log('‚ùå No tokens received from CoinGecko');
      return;
    }
    
    // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤
    console.log('\nüìã Sample tokens:');
    tokens.slice(0, 3).forEach((token, i) => {
      console.log(`${i + 1}. ${token.symbol} (${token.name})`);
      console.log(`   Mint: ${token.mint}`);
      console.log(`   Price: $${token.priceUsd}`);
      console.log(`   Volume: $${token.volume24h}`);
      console.log(`   Market Cap: $${token.marketCap}`);
      console.log('');
    });
    
    // 4. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const coinDataTokens = tokens.map(token => ({
      coinId: token.symbol.toLowerCase(),
      mint: token.mint,
      symbol: token.symbol,
      name: token.name,
      network: 'Solana',
      price: token.priceUsd,
      volume: token.volume24h,
      marketCap: token.marketCap,
      fdv: token.fdv
    }));
    
    console.log(`üíæ Attempting to save ${coinDataTokens.length} tokens...`);
    
    // 5. –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
    await db.saveCoinDataBatch(coinDataTokens);
    console.log('‚úÖ Tokens saved successfully');
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    const savedTokens = await db.getFreshTokensFromCoinData('Solana', 1);
    console.log(`üìä Found ${savedTokens.length} fresh tokens in database`);
    
    // 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    if (savedTokens.length > 0) {
      console.log('\nüìã Saved tokens:');
      savedTokens.slice(0, 3).forEach((token, i) => {
        console.log(`${i + 1}. ${token.symbol} (${token.coin_id})`);
        console.log(`   Mint: ${token.mint}`);
        console.log(`   Price: $${token.price}`);
        console.log(`   Timestamp: ${token.timestamp}`);
        console.log('');
      });
    }
    
    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    const totalCount = await db.pool.query(`
      SELECT COUNT(*) as count FROM coin_data WHERE network = 'Solana'
    `);
    console.log(`üìä Total Solana tokens in database: ${totalCount.rows[0].count}`);
    
    console.log('\n‚úÖ Token saving test completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error in token saving test:', error);
    console.error('Stack:', error.stack);
  } finally {
    await db.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testTokenSaving().catch(console.error); 