#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã coin_data
require('ts-node').register({
  project: './tsconfig.json'
});

const { Database } = require('./src/database');

async function checkCoinDataStatus() {
  try {
    console.log('üîç Checking coin_data table status...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.DATABASE_URL) {
      console.error('‚ùå DATABASE_URL environment variable is missing');
      process.exit(1);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const db = new Database(process.env.DATABASE_URL);
    await db.initialize();
    console.log('‚úÖ Database connected');
    
    // 1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    console.log('\nüìä General Statistics:');
    const totalCount = await db.pool.query('SELECT COUNT(*) as count FROM coin_data');
    console.log(`‚Ä¢ Total records: ${totalCount.rows[0].count}`);
    
    // 2. –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const recentCount = await db.pool.query(`
      SELECT COUNT(*) as count 
      FROM coin_data 
      WHERE timestamp > NOW() - INTERVAL '24 hours'
    `);
    console.log(`‚Ä¢ Records in last 24h: ${recentCount.rows[0].count}`);
    
    // 3. –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const hourlyCount = await db.pool.query(`
      SELECT COUNT(*) as count 
      FROM coin_data 
      WHERE timestamp > NOW() - INTERVAL '1 hour'
    `);
    console.log(`‚Ä¢ Records in last 1h: ${hourlyCount.rows[0].count}`);
    
    // 4. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
    console.log('\nüìã Latest 10 records:');
    const latestRecords = await db.pool.query(`
      SELECT coin_id, symbol, name, mint, price, volume, market_cap, timestamp 
      FROM coin_data 
      ORDER BY timestamp DESC 
      LIMIT 10
    `);
    
    latestRecords.rows.forEach((record, i) => {
      const timeAgo = new Date(record.timestamp).toLocaleString();
      console.log(`${i + 1}. ${record.symbol} (${record.coin_id})`);
      console.log(`   Mint: ${record.mint}`);
      console.log(`   Price: $${record.price}`);
      console.log(`   Volume: $${record.volume?.toLocaleString() || 'N/A'}`);
      console.log(`   Market Cap: $${record.market_cap?.toLocaleString() || 'N/A'}`);
      console.log(`   Time: ${timeAgo}`);
      console.log('');
    });
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    console.log('üîç Duplicate Check:');
    const duplicates = await db.pool.query(`
      SELECT coin_id, network, COUNT(*) as count
      FROM coin_data 
      GROUP BY coin_id, network 
      HAVING COUNT(*) > 1
      ORDER BY count DESC
      LIMIT 5
    `);
    
    if (duplicates.rows.length > 0) {
      console.log('‚ö†Ô∏è Found duplicate records:');
      duplicates.rows.forEach(row => {
        console.log(`‚Ä¢ ${row.coin_id} (${row.network}): ${row.count} records`);
      });
    } else {
      console.log('‚úÖ No duplicate records found');
    }
    
    // 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ç—è–º
    console.log('\nüåê Network Statistics:');
    const networkStats = await db.pool.query(`
      SELECT network, COUNT(*) as count
      FROM coin_data 
      GROUP BY network
      ORDER BY count DESC
    `);
    
    networkStats.rows.forEach(row => {
      console.log(`‚Ä¢ ${row.network}: ${row.count} records`);
    });
    
    // 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    console.log('\n‚è∞ Time Distribution:');
    const timeStats = await db.pool.query(`
      SELECT 
        DATE(timestamp) as date,
        COUNT(*) as count
      FROM coin_data 
      WHERE timestamp > NOW() - INTERVAL '7 days'
      GROUP BY DATE(timestamp)
      ORDER BY date DESC
      LIMIT 7
    `);
    
    timeStats.rows.forEach(row => {
      console.log(`‚Ä¢ ${row.date}: ${row.count} records`);
    });
    
    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüèóÔ∏è Table Structure:');
    const tableInfo = await db.pool.query(`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'coin_data'
      ORDER BY ordinal_position
    `);
    
    tableInfo.rows.forEach(row => {
      console.log(`‚Ä¢ ${row.column_name}: ${row.data_type} (${row.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
    });
    
    // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\nüìà Indexes:');
    const indexes = await db.pool.query(`
      SELECT indexname, indexdef
      FROM pg_indexes 
      WHERE tablename = 'coin_data'
    `);
    
    indexes.rows.forEach(row => {
      console.log(`‚Ä¢ ${row.indexname}`);
    });
    
    // 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    console.log('\nüîí Constraints:');
    const constraints = await db.pool.query(`
      SELECT conname, contype, pg_get_constraintdef(oid) as definition
      FROM pg_constraint 
      WHERE conrelid = 'coin_data'::regclass
    `);
    
    constraints.rows.forEach(row => {
      console.log(`‚Ä¢ ${row.conname} (${row.contype}): ${row.definition}`);
    });
    
    console.log('\n‚úÖ Status check completed!');
    
  } catch (error) {
    console.error('‚ùå Status check failed:', error);
    if (error instanceof Error) {
      console.error('‚ùå Error details:', error.message);
      console.error('‚ùå Error stack:', error.stack);
    }
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
checkCoinDataStatus(); 