const fs = require('fs');
const path = require('path');

const DIAGNOSTICS_LOG_FILE = 'tradebot-diagnostics.log';

function readTradebotDiagnostics() {
  console.log('üîß === TRADEBOT DIAGNOSTICS REPORT === üîß');
  console.log('‚è±Ô∏è  –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n');

  if (!fs.existsSync(DIAGNOSTICS_LOG_FILE)) {
    console.log('‚ùå –§–∞–π–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤ —Ç—Ä–µ–π–¥–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    const content = fs.readFileSync(DIAGNOSTICS_LOG_FILE, 'utf8');
    const lines = content.trim().split('\n').filter(line => line.length > 0);
    
    if (lines.length === 0) {
      console.log('üìã –§–∞–π–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—É—Å—Ç');
      return;
    }

    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${lines.length}\n`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
    const recentLines = lines.slice(-10);
    
    console.log('üìã === –ü–û–°–õ–ï–î–ù–ò–ï 10 –ó–ê–ü–ò–°–ï–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò === üìã\n');
    
    recentLines.forEach((line, index) => {
      try {
        const entry = JSON.parse(line);
        const timestamp = new Date(entry.timestamp).toLocaleString();
        const statusIcon = entry.status === 'HEALTHY' ? '‚úÖ' : 
                          entry.status === 'WARNING' ? '‚ö†Ô∏è' : 'üö®';
        
        console.log(`${statusIcon} [${timestamp}] ${entry.status}`);
        console.log(`   üìä –ú–µ—Ç—Ä–∏–∫–∏: –û—à–∏–±–æ–∫: ${entry.metrics.errorRate}, –ü–æ–∑–∏—Ü–∏–π: ${entry.metrics.openPositions}`);
        
        if (entry.issuesCount > 0) {
          console.log(`   üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${entry.issuesCount}`);
          entry.issues.forEach(issue => {
            const severityIcon = issue.severity === 'CRITICAL' ? 'üö®' : 
                               issue.severity === 'HIGH' ? '‚ö†Ô∏è' : 
                               issue.severity === 'MEDIUM' ? 'üü°' : 'üîµ';
            console.log(`      ${severityIcon} ${issue.issue} (${issue.severity})`);
          });
        }
        console.log('');
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø–∏—Å–∏ ${index + 1}: ${error.message}`);
      }
    });

    // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    console.log('üìä === –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í === üìä\n');
    
    const allEntries = lines.map(line => {
      try {
        return JSON.parse(line);
      } catch {
        return null;
      }
    }).filter(entry => entry !== null);

    if (allEntries.length === 0) {
      console.log('‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusCounts = {};
    allEntries.forEach(entry => {
      statusCounts[entry.status] = (statusCounts[entry.status] || 0) + 1;
    });

    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    Object.entries(statusCounts).forEach(([status, count]) => {
      const percentage = ((count / allEntries.length) * 100).toFixed(1);
      const icon = status === 'HEALTHY' ? '‚úÖ' : status === 'WARNING' ? '‚ö†Ô∏è' : 'üö®';
      console.log(`   ${icon} ${status}: ${count} (${percentage}%)`);
    });

    // –¢–æ–ø –ø—Ä–æ–±–ª–µ–º
    const issuesCounts = {};
    allEntries.forEach(entry => {
      if (entry.issues && entry.issues.length > 0) {
        entry.issues.forEach(issue => {
          issuesCounts[issue.issue] = (issuesCounts[issue.issue] || 0) + 1;
        });
      }
    });

    if (Object.keys(issuesCounts).length > 0) {
      console.log('\nüîç –¢–æ–ø –ø—Ä–æ–±–ª–µ–º:');
      const sortedIssues = Object.entries(issuesCounts)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5);
      
      sortedIssues.forEach(([issue, count]) => {
        console.log(`   üî∏ ${issue}: ${count} —Ä–∞–∑`);
      });
    }

    // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const lastEntry = allEntries[allEntries.length - 1];
    const lastCheck = new Date(lastEntry.timestamp);
    const minutesAgo = Math.floor((Date.now() - lastCheck.getTime()) / (1000 * 60));
    
    console.log(`\nüïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
    console.log(`üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${lastEntry.status}`);
    console.log(`üí∞ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${lastEntry.metrics.openPositions}`);

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
readTradebotDiagnostics(); 