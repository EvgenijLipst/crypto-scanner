// test-token-loading.js - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
const { Database } = require('./src/database.js');
require('dotenv').config();

async function testTokenLoading() {
  console.log('üß™ Testing token loading and saving...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.DATABASE_URL) {
    console.log('‚ùå DATABASE_URL not found in environment variables');
    console.log('‚ÑπÔ∏è This test requires database connection');
    return;
  }
  
  const db = new Database(process.env.DATABASE_URL);
  
  try {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.initialize();
    console.log('‚úÖ Database initialized');
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑–µ
    const currentTokens = await db.getFreshTokensFromCoinData('Solana', 48);
    console.log(`üìä Current tokens in database: ${currentTokens.length}`);
    
    if (currentTokens.length > 0) {
      console.log('üìã Sample current tokens:');
      currentTokens.slice(0, 5).forEach((token, i) => {
        console.log(`${i + 1}. ${token.symbol} - mint: "${token.mint || 'NULL'}" - price: $${token.price}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏–º–µ—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ mint –∞–¥—Ä–µ—Å–∞
      const tokensWithMint = currentTokens.filter(token => token.mint && !token.mint.includes('placeholder'));
      const tokensWithPlaceholder = currentTokens.filter(token => token.mint && token.mint.includes('placeholder'));
      const tokensWithoutMint = currentTokens.filter(token => !token.mint);
      
      console.log(`\nüìä Token mint analysis:`);
      console.log(`‚Ä¢ Tokens with real mint addresses: ${tokensWithMint.length}`);
      console.log(`‚Ä¢ Tokens with placeholder mints: ${tokensWithPlaceholder.length}`);
      console.log(`‚Ä¢ Tokens without mint: ${tokensWithoutMint.length}`);
      
      if (tokensWithMint.length > 0) {
        console.log('\nüìã Tokens with real mint addresses:');
        tokensWithMint.slice(0, 3).forEach((token, i) => {
          console.log(`${i + 1}. ${token.symbol} - mint: "${token.mint}"`);
        });
      }
      
      if (tokensWithPlaceholder.length > 0) {
        console.log('\nüìã Tokens with placeholder mints:');
        tokensWithPlaceholder.slice(0, 3).forEach((token, i) => {
          console.log(`${i + 1}. ${token.symbol} - mint: "${token.mint}"`);
        });
      }
    } else {
      console.log('üìä No tokens found in database');
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-—Ç–æ–∫–µ–Ω–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ mint –∞–¥—Ä–µ—Å–∞–º–∏
    console.log('\nüíæ Testing mock token saving with real mint addresses...');
    const mockTokens = [
      {
        coinId: 'solana',
        mint: 'So11111111111111111111111111111111111111112',
        symbol: 'SOL',
        name: 'Solana',
        network: 'Solana',
        price: 100.50,
        volume: 1000000,
        marketCap: 50000000,
        fdv: 50000000
      },
      {
        coinId: 'test-token',
        mint: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',
        symbol: 'USDC',
        name: 'USD Coin',
        network: 'Solana',
        price: 1.00,
        volume: 5000000,
        marketCap: 25000000,
        fdv: 25000000
      }
    ];
    
    console.log('üìã Mock tokens to save:');
    mockTokens.forEach((token, i) => {
      console.log(`${i + 1}. ${token.symbol} - mint: "${token.mint}" - coinId: "${token.coinId}"`);
    });
    
    await db.saveCoinDataBatch(mockTokens);
    console.log('‚úÖ Mock tokens saved to database');
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    const savedTokens = await db.getFreshTokensFromCoinData('Solana', 1); // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    console.log(`\nüìä Fresh tokens after saving: ${savedTokens.length}`);
    
    if (savedTokens.length > 0) {
      console.log('üìã Recently saved tokens:');
      savedTokens.slice(0, 5).forEach((token, i) => {
        console.log(`${i + 1}. ${token.symbol} - mint: "${token.mint || 'NULL'}" - price: $${token.price}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    console.error('Error details:', error.message);
  } finally {
    await db.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testTokenLoading().catch(console.error); 