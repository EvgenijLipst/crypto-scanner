#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è coin_data —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ Railway
require('ts-node').register({
  project: './tsconfig.json'
});

const { Database } = require('./src/database');
const { CoinGeckoAPI } = require('./src/coingecko');
const { TokenAnalyzer } = require('./src/token-analyzer');
const { JupiterAPI } = require('./src/jupiter');

async function forceCoinDataUpdate() {
  try {
    console.log('üöÄ Force updating coin_data table on Railway...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.DATABASE_URL) {
      console.error('‚ùå DATABASE_URL environment variable is missing');
      process.exit(1);
    }
    
    if (!process.env.COINGECKO_API_KEY) {
      console.error('‚ùå COINGECKO_API_KEY environment variable is missing');
      process.exit(1);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    const db = new Database(process.env.DATABASE_URL);
    const coingecko = new CoinGeckoAPI(process.env.COINGECKO_API_KEY);
    const jupiter = new JupiterAPI();
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
    const analysisConfig = {
      minTokenAgeDays: 14,
      minLiquidityUsd: 10000,
      maxFdvUsd: 5000000,
      minVolumeSpike: 3,
      maxRsiOversold: 35,
      maxPriceImpactPercent: 3,
      priceImpactTestAmount: 10
    };
    
    const tokenAnalyzer = new TokenAnalyzer(coingecko, jupiter, db, analysisConfig);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üîß Initializing database...');
    await db.initialize();
    console.log('‚úÖ Database initialized');
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
    console.log('üßπ Cleaning old coin_data records...');
    await db.cleanupOldCoinData(24);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const beforeCount = await db.pool.query('SELECT COUNT(*) as count FROM coin_data');
    console.log(`üìä Records before update: ${beforeCount.rows[0].count}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ CoinGecko (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API)
    console.log('üîÑ Fetching tokens from CoinGecko...');
    const tokens = await coingecko.getTopSolanaTokens(100);
    console.log(`‚úÖ Fetched ${tokens.length} tokens from CoinGecko`);
    
    if (tokens.length === 0) {
      console.log('‚ùå No tokens received from CoinGecko');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
    console.log('üìä Token statistics:');
    const totalMarketCap = tokens.reduce((sum, token) => sum + token.marketCap, 0);
    const totalVolume = tokens.reduce((sum, token) => sum + token.volume24h, 0);
    console.log(`‚Ä¢ Total Market Cap: $${totalMarketCap.toLocaleString()}`);
    console.log(`‚Ä¢ Total Volume 24h: $${totalVolume.toLocaleString()}`);
    console.log(`‚Ä¢ Average Price: $${(tokens.reduce((sum, token) => sum + token.priceUsd, 0) / tokens.length).toFixed(6)}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ Saving tokens to coin_data table...');
    await tokenAnalyzer.saveTokensToCoinData(tokens);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const afterCount = await db.pool.query('SELECT COUNT(*) as count FROM coin_data');
    console.log(`üìä Records after update: ${afterCount.rows[0].count}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–∏–µ –∑–∞–ø–∏—Å–∏
    console.log('üìã Fresh coin_data records (last 10):');
    const freshRecords = await db.pool.query(`
      SELECT coin_id, symbol, name, mint, price, volume, market_cap, timestamp 
      FROM coin_data 
      WHERE timestamp > NOW() - INTERVAL '1 hour'
      ORDER BY timestamp DESC 
      LIMIT 10
    `);
    
    freshRecords.rows.forEach((record, i) => {
      console.log(`${i + 1}. ${record.symbol} (${record.coin_id}) - $${record.price} - Vol: $${record.volume?.toLocaleString()}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–µ–π
    console.log('üîç Checking data integrity...');
    const duplicateCheck = await db.pool.query(`
      SELECT coin_id, network, COUNT(*) as count
      FROM coin_data 
      GROUP BY coin_id, network 
      HAVING COUNT(*) > 1
      ORDER BY count DESC
      LIMIT 5
    `);
    
    if (duplicateCheck.rows.length > 0) {
      console.log('‚ö†Ô∏è Found duplicate records:');
      duplicateCheck.rows.forEach(row => {
        console.log(`‚Ä¢ ${row.coin_id} (${row.network}): ${row.count} records`);
      });
    } else {
      console.log('‚úÖ No duplicate records found');
    }
    
    console.log('‚úÖ Force update completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Force update failed:', error);
    if (error instanceof Error) {
      console.error('‚ùå Error details:', error.message);
      console.error('‚ùå Error stack:', error.stack);
    }
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
forceCoinDataUpdate(); 