const DatabaseMonitor = require('./monitor-database');

async function quickTest() {
    console.log('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    const monitor = new DatabaseMonitor();
    
    try {
        await monitor.connect();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        const queries = [
            { name: '–ü—É–ª—ã', query: 'SELECT COUNT(*) as count FROM pools' },
            { name: 'OHLCV', query: 'SELECT COUNT(*) as count FROM ohlcv' },
            { name: '–î–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç', query: 'SELECT COUNT(*) as count FROM coin_data' },
            { name: '–ü–æ—Å–ª–µ–¥–Ω—è—è OHLCV –∑–∞–ø–∏—Å—å', query: 'SELECT mint, ts, v FROM ohlcv ORDER BY ts DESC LIMIT 1' },
        ];
        
        for (const { name, query } of queries) {
            try {
                const result = await monitor.executeQuery(query);
                console.log(`‚úÖ ${name}:`, result);
            } catch (error) {
                console.log(`‚ùå ${name}: ${error.message}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã pools:');
        const poolsStructure = await monitor.executeQuery(`
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'pools'
        `);
        console.table(poolsStructure);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await monitor.disconnect();
    }
}

quickTest(); 