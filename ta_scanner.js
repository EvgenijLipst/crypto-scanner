const { Pool } = require('pg');
const axios = require('axios');
const rateLimit = require('axios-rate-limit');
const { Telegraf } = require('telegraf');
const { SMA, EMA, RSI } = require('technicalindicators');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const DATABASE_URL = process.env.DATABASE_URL;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const COINGECKO_API_KEY = process.env.COINGECKO_API_KEY;

// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á API ---
if (!DATABASE_URL || !TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID || !COINGECKO_API_KEY) {
    console.error("–û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (DATABASE_URL, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, COINGECKO_API_KEY)");
    process.exit(1);
}

// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–Ω–∏–∂–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ ---
// –ù–µ –±–æ–ª–µ–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 60 —Å–µ–∫—É–Ω–¥ (1 –º–∏–Ω—É—Ç–∞)
const http = rateLimit(axios.create({
    headers: { 'x-cg-demo-api-key': COINGECKO_API_KEY }
}), { maxRequests: 5, perMilliseconds: 60000 });


const NETWORKS = {
    'Ethereum': 'ethereum-ecosystem',
    'BSC': 'binance-smart-chain',
    'Solana': 'solana-ecosystem'
};

const PLATFORM_ID_MAP = {
    'Ethereum': 'ethereum',
    'BSC': 'binance-smart-chain',
    'Solana': 'solana'
};

const PRICE_INCREASE_THRESHOLD = 3.0;
const VOLUME_INCREASE_THRESHOLD = 15.0;
const RSI_MIN = 40;
const RSI_MAX = 70;
const HISTORICAL_DAYS = 90;

const dbPool = new Pool({ connectionString: DATABASE_URL });
const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

// ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
// –§—É–Ω–∫—Ü–∏–∏ setupDatabase, getPreviousData, insertData, cleanupOldData, 
// getTopCoinsData, getTechnicalIndicators, getContractAddress,
// escapeMarkdown, sendTelegramMessage –∏ main –æ—Å—Ç–∞—é—Ç—Å—è —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑.
// –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª —Ü–µ–ª–∏–∫–æ–º, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–π.

async function setupDatabase() {
    const client = await dbPool.connect();
    try {
        await client.query(`CREATE TABLE IF NOT EXISTS coin_data (id SERIAL PRIMARY KEY, coin_id VARCHAR(100) NOT NULL, network VARCHAR(50) NOT NULL, price DOUBLE PRECISION NOT NULL, volume DOUBLE PRECISION NOT NULL, timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW());`);
        await client.query(`CREATE INDEX IF NOT EXISTS idx_coin_network_time ON coin_data (coin_id, network, timestamp DESC);`);
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ë–î:", err);
    } finally {
        client.release();
    }
}

async function getPreviousData(coinId, network) {
    try {
        const res = await dbPool.query(`SELECT price, volume FROM coin_data WHERE coin_id = $1 AND network = $2 ORDER BY timestamp DESC LIMIT 1;`, [coinId, network]);
        return res.rows[0];
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${coinId}:`, err);
        return null;
    }
}

async function insertData(coinId, network, price, volume) {
    try {
        await dbPool.query(`INSERT INTO coin_data (coin_id, network, price, volume) VALUES ($1, $2, $3, $4);`, [coinId, network, price, volume]);
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${coinId}:`, err);
    }
}

async function cleanupOldData() {
    try {
        const res = await dbPool.query("DELETE FROM coin_data WHERE timestamp < NOW() - INTERVAL '24 hours';");
        console.log(`–û—á–∏—â–µ–Ω–æ ${res.rowCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π.`);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", err);
    }
}

async function getTopCoinsData(category) {
    const url = "https://api.coingecko.com/api/v3/coins/markets";
    const params = { vs_currency: 'usd', category: category, order: 'market_cap_desc', per_page: 250, page: 1, sparkline: 'false' };
    try {
        const response = await http.get(url, { params });
        return response.data;
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ API CoinGecko –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –¥–ª—è ${category}:`, err.message);
        return [];
    }
}

async function getTechnicalIndicators(coinId) {
    const url = `https://api.coingecko.com/api/v3/coins/${coinId}/market_chart`;
    const params = { vs_currency: 'usd', days: HISTORICAL_DAYS, interval: 'daily' };
    try {
        const response = await http.get(url, { params });
        const prices = response.data.prices.map(p => p[1]);
        console.log(`  -> –î–ª—è ${coinId} –ø–æ–ª—É—á–µ–Ω–æ ${prices.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.`);
        if (prices.length < 50) {
            console.log(`  -> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ SMA 50. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö–∞–Ω–∞–ª–∏–∑.`);
            return null;
        }
        const sma50 = SMA.calculate({ period: 50, values: prices }).pop();
        const ema20 = EMA.calculate({ period: 20, values: prices }).pop();
        const rsi14 = RSI.calculate({ period: 14, values: prices }).pop();
        return { sma50, ema20, rsi: rsi14 };
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ API CoinGecko –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${coinId}:`, err.message);
        return null;
    }
}

async function getContractAddress(coinId, networkName) {
    const platformId = PLATFORM_ID_MAP[networkName];
    if (!platformId) return null;
    
    const url = `https://api.coingecko.com/api/v3/coins/${coinId}`;
    const params = { localization: 'false', tickers: 'false', market_data: 'false', community_data: 'false', developer_data: 'false', sparkline: 'false' };
    try {
        const response = await http.get(url, { params });
        const contractAddress = response.data?.platforms?.[platformId];
        return contractAddress || null;
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ API CoinGecko –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è ${coinId}:`, err.message);
        return null;
    }
}

function escapeMarkdown(text) {
    const chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
    return String(text).replace(new RegExp(`[${chars.join('\\')}]`, 'g'), '\\$&');
}

async function sendTelegramMessage(message) {
    try {
        await bot.telegram.sendMessage(TELEGRAM_CHAT_ID, message, { parse_mode: 'MarkdownV2' });
        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.");
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", err.response ? JSON.stringify(err.response, null, 2) : err);
    }
}

async function main() {
    console.log(`[${new Date().toISOString()}] –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...`);
    await setupDatabase();

    for (const [networkName, category] of Object.entries(NETWORKS)) {
        console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–∏: ${networkName} ---`);
        const coinsData = await getTopCoinsData(category);
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${coinsData.length} –º–æ–Ω–µ—Ç –¥–ª—è —Å–µ—Ç–∏ ${networkName}.`);
        if (!coinsData || coinsData.length === 0) {
            console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Ç—å ${networkName}, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö.`);
            continue;
        }

        for (const coin of coinsData) {
            const { id: coinId, symbol, current_price: currentPrice, total_volume: currentVolume } = coin;
            if (!coinId || !currentPrice || !currentVolume) continue;
            
            const coinSymbol = symbol.toUpperCase();
            console.log(`  [${coinSymbol}] –°–∫–∞–Ω–∏—Ä—É—é... –¶–µ–Ω–∞: $${currentPrice}, –û–±—ä–µ–º: $${Math.round(currentVolume).toLocaleString('en-US')}`);
            
            const previousData = await getPreviousData(coinId, networkName);

            if (previousData) {
                const { price: prevPrice, volume: prevVolume } = previousData;
                if (prevPrice > 0 && prevVolume > 0) {
                    const priceChange = ((currentPrice - prevPrice) / prevPrice) * 100;
                    const volumeChange = ((currentVolume - prevVolume) / prevVolume) * 100;

                    if (priceChange >= PRICE_INCREASE_THRESHOLD || volumeChange >= VOLUME_INCREASE_THRESHOLD) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–õ–ò, –∫–∞–∫ –≤—ã –≤—ã–±—Ä–∞–ª–∏
                        console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è ${coinSymbol}: –†–æ—Å—Ç —Ü–µ–Ω—ã ${priceChange.toFixed(2)}%, –†–æ—Å—Ç –æ–±—ä–µ–º–∞ ${volumeChange.toFixed(2)}%`);
                        
                        const indicators = await getTechnicalIndicators(coinId);
                        if (indicators) {
                            const { sma50, ema20, rsi } = indicators;
                            const priceAboveEma20 = currentPrice > ema20;
                            const priceAboveSma50 = currentPrice > sma50;
                            const rsiInRange = rsi >= RSI_MIN && rsi <= RSI_MAX;

                            if ((priceAboveEma20 || priceAboveSma50) && rsiInRange) {
                                const contractAddress = await getContractAddress(coinId, networkName);
                                
                                let messageText = `üöÄ *–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ: ${escapeMarkdown(coinSymbol)} \\(${escapeMarkdown(networkName)}\\)*\n\n` +
                                                `üìà *–†–æ—Å—Ç —Ü–µ–Ω—ã:* ${escapeMarkdown(priceChange.toFixed(2))}%\n` +
                                                `üìä *–†–æ—Å—Ç –æ–±—ä–µ–º–∞:* ${escapeMarkdown(volumeChange.toFixed(2))}%\n\n` +
                                                `üîπ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* $${escapeMarkdown(currentPrice.toLocaleString('en-US'))}\n` +
                                                `üîπ *–û–±—ä–µ–º \\(24—á\\):* $${escapeMarkdown(Math.round(currentVolume).toLocaleString('en-US'))}\n` +
                                                `üîπ *RSI\\(14\\):* ${escapeMarkdown(rsi.toFixed(2))}\n\n` +
                                                `‚úÖ –¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ EMA\\(20\\) –∏–ª–∏ SMA\\(50\\) –≤–≤–µ—Ä—Ö\\.`;
                                if (contractAddress) {
                                    messageText += `\n\nüìù *–ö–æ–Ω—Ç—Ä–∞–∫—Ç:*\n\`${contractAddress}\``;
                                }
                                await sendTelegramMessage(messageText);
                            }
                        }
                    }
                }
            }
            await insertData(coinId, networkName, currentPrice, currentVolume);
        }
    }

    await cleanupOldData();
    console.log(`[${new Date().toISOString()}] –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.`);
}

main().catch(err => {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:", err);
    process.exit(1);
});