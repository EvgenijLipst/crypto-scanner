// ta_scanner.js (–í–ï–†–°–ò–Ø 2.1: –ü–û–î–ö–õ–Æ–ß–ï–ù –ö–õ–Æ–ß COINGECKO API)
const axios = require('axios');
const { Pool } = require('pg');
const { SMA, EMA, RSI } = require('technicalindicators');

const CONFIG = {
    topCoinsToFetch: 500,
    priceChangeThreshold: 3,
    volumeChangeThreshold: 15,
    smaPeriod: 50,
    emaPeriod: 20,
    rsiPeriod: 14,
    dbCleanupHours: 24,
    telegram: {
        botToken: process.env.TELEGRAM_BOT_TOKEN,
        chatId: process.env.TELEGRAM_CHAT_ID,
    }
};

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

const runScanner = async () => {
    console.log('–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞...');
    await setupDatabase();
    console.log(`1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-${CONFIG.topCoinsToFetch} —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏...`);
    const marketData = await getTopMarketData(CONFIG.topCoinsToFetch);
    
    if (!marketData || marketData.length === 0) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.");
        return;
    }
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${marketData.length} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.`);
    console.log('2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É...');
    await saveMarketData(marketData);
    console.log('3. –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');
    for (const tokenData of marketData) {
        await analyzeToken(tokenData);
    }
    console.log('4. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await cleanupOldData();
};

async function setupDatabase() {
    await pool.query(`
        CREATE TABLE IF NOT EXISTS token_market_data (
            id SERIAL PRIMARY KEY,
            coingecko_id TEXT NOT NULL,
            symbol TEXT NOT NULL,
            price_usd NUMERIC(20, 8),
            volume_24h_usd NUMERIC(25, 4),
            timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            UNIQUE(coingecko_id, timestamp)
        )
    `);
}

async function getTopMarketData(limit) {
    const marketData = [];
    const perPage = 250;
    const totalPages = Math.ceil(limit / perPage);

    // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    const coingeckoApiKey = process.env.COINGECKO_API_KEY;
    if (coingeckoApiKey) {
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á CoinGecko API.');
    } else {
        console.log('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á CoinGecko API –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã.');
    }

    for (let page = 1; page <= totalPages; page++) {
        try {
            let url = `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=${perPage}&page=${page}&sparkline=false`;
            
            // --- –ò –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            // –ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –∑–∞–ø—Ä–æ—Å—É. Pro-–∫–ª—é—á–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫.
            const headers = {};
            if (coingeckoApiKey) {
                headers['x-cg-pro-api-key'] = coingeckoApiKey;
            }

            const { data } = await axios.get(url, { headers });
            marketData.push(...data);

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page} —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:`, error.message);
        }
        await new Promise(res => setTimeout(res, 1000));
    }
    return marketData;
}


async function saveMarketData(marketData) {
    let savedCount = 0;
    for (const token of marketData) {
        if (token.id && token.current_price !== null && token.total_volume !== null) {
            try {
                await pool.query(
                    `INSERT INTO token_market_data(coingecko_id, symbol, price_usd, volume_24h_usd) VALUES($1, $2, $3, $4)`,
                    [token.id, token.symbol.toUpperCase(), token.current_price, token.total_volume]
                );
                savedCount++;
            } catch(e) {
                if (e.code !== '23505') { 
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ${token.id}: ${e.message}`);
                }
            }
        }
    }
    console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.`);
}

async function analyzeToken(currentTokenData) {
    try {
        const { rows: history } = await pool.query(
            `SELECT price_usd, volume_24h_usd FROM token_market_data WHERE coingecko_id = $1 ORDER BY timestamp DESC LIMIT 100`,
            [currentTokenData.id]
        );

        if (history.length < 2) {
            return;
        }

        const currentPrice = parseFloat(history[0].price_usd);
        const previousPrice = parseFloat(history[1].price_usd);
        const currentVolume = parseFloat(history[0].volume_24h_usd);
        const previousVolume = parseFloat(history[1].volume_24h_usd);
        
        if (!currentPrice || !previousPrice || !currentVolume || !previousVolume) {
            return;
        }

        const priceChange = ((currentPrice - previousPrice) / previousPrice) * 100;
        const volumeChange = ((currentVolume - previousVolume) / previousVolume) * 100;

        if (priceChange >= CONFIG.priceChangeThreshold && volumeChange >= CONFIG.volumeChangeThreshold) {
            console.log(`[–ü–ï–†–í–ò–ß–ù–´–ô –°–ò–ì–ù–ê–õ] –¥–ª—è ${currentTokenData.symbol.toUpperCase()}: –†–æ—Å—Ç —Ü–µ–Ω—ã ${priceChange.toFixed(2)}%, –†–æ—Å—Ç –æ–±—ä–µ–º–∞ ${volumeChange.toFixed(2)}%`);
            
            const prices = history.map(row => parseFloat(row.price_usd)).reverse();
            if (prices.length < CONFIG.smaPeriod || prices.length < CONFIG.rsiPeriod) {
                console.log(`[INFO] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¢–ê –¥–ª—è ${currentTokenData.symbol.toUpperCase()}`);
                return;
            }

            const sma50 = SMA.calculate({ period: CONFIG.smaPeriod, values: prices });
            const ema20 = EMA.calculate({ period: CONFIG.emaPeriod, values: prices });
            const rsi = RSI.calculate({ period: CONFIG.rsiPeriod, values: prices });
            
            const lastSma50 = sma50[sma50.length - 1];
            const lastEma20 = ema20[ema20.length - 1];
            const lastRsi = rsi[rsi.length - 1];

            console.log(`[TA-–î–ê–ù–ù–´–ï] –¥–ª—è ${currentTokenData.symbol.toUpperCase()}: –¶–µ–Ω–∞=${currentPrice.toFixed(4)}, SMA50=${lastSma50.toFixed(4)}, EMA20=${lastEma20.toFixed(4)}, RSI=${lastRsi.toFixed(2)}`);

            const smaCrossover = currentPrice > lastSma50;
            const emaCrossover = currentPrice > lastEma20;
            const rsiInRange = lastRsi > 40 && lastRsi < 70;

            if ((smaCrossover || emaCrossover) && rsiInRange) {
                console.log(`[!!!] –ü–û–õ–ù–´–ô –°–ò–ì–ù–ê–õ –¥–ª—è ${currentTokenData.symbol.toUpperCase()}. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...`);
                const message = `
                üìà **–°–∏–≥–Ω–∞–ª –ø–æ —Ç–æ–∫–µ–Ω—É: ${currentTokenData.symbol.toUpperCase()}**
                -----------------------------------
                **–¶–µ–Ω–∞:** $${currentPrice.toFixed(4)}
                **–†–æ—Å—Ç —Ü–µ–Ω—ã (15 –º–∏–Ω):** ${priceChange.toFixed(2)}%
                **–†–æ—Å—Ç –æ–±—ä–µ–º–∞ (15 –º–∏–Ω):** ${volumeChange.toFixed(2)}%
                -----------------------------------
                **SMA50:** ${lastSma50.toFixed(4)} (–ø—Ä–æ–±–∏—Ç: ${smaCrossover})
                **EMA20:** ${lastEma20.toFixed(4)} (–ø—Ä–æ–±–∏—Ç: ${emaCrossover})
                **RSI:** ${lastRsi.toFixed(2)} (–≤ –Ω–æ—Ä–º–µ: ${rsiInRange})
                `;
                await sendTelegramMessage(message);
            } else {
                console.log(`[INFO] –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è ${currentTokenData.symbol.toUpperCase()} —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ –¢–ê –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.`);
            }
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞ ${currentTokenData.symbol}:`, error.message);
    }
}

async function cleanupOldData() {
    const {rowCount} = await pool.query(`DELETE FROM token_market_data WHERE timestamp < NOW() - INTERVAL '${CONFIG.dbCleanupHours} hours'`);
    console.log(`–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ ${rowCount} –∑–∞–ø–∏—Å–µ–π.`);
}

async function sendTelegramMessage(text) {
    const { botToken, chatId } = CONFIG.telegram;
    if (!botToken || !chatId) {
        console.warn('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.');
        return;
    }
    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
    try {
        await axios.post(url, { chat_id: chatId, text, parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
    }
}

runScanner()
    .then(() => console.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.'))
    .catch(e => console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞:', e))
    .finally(() => {
        pool.end();
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.');
    });