// ta_scanner.js
const axios = require("axios");
const { Pool } = require("pg");
const { SMA, EMA, RSI } = require("technicalindicators");

// --- –ù–ê–°–¢–†–û–ô–ö–ò ---
const CONFIG = {
  // –°–µ—Ç–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (ID –æ—Ç CoinGecko)
  categories: ["ethereum-ecosystem", "binance-smart-chain", "solana-ecosystem"],
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
  priceChangeThreshold: 3, // –†–æ—Å—Ç —Ü–µ–Ω—ã –Ω–∞ 3%
  volumeChangeThreshold: 15, // –†–æ—Å—Ç –æ–±—ä–µ–º–∞ –Ω–∞ 15%
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  smaPeriod: 50,
  emaPeriod: 20,
  rsiPeriod: 14,
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ API
  dbCleanupHours: 24,
  telegram: {
    botToken: process.env.TELEGRAM_BOT_TOKEN,
    chatId: process.env.TELEGRAM_CHAT_ID,
  },
};

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

// --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
const runScanner = async () => {
  console.log("–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞...");
  await setupDatabase();

  // 1. –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —Ç–æ–ø-250 —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  console.log("1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø-250 —Ç–æ–∫–µ–Ω–æ–≤...");
  let allTokenIds = new Set();
  for (const category of CONFIG.categories) {
    try {
      const { data } = await axios.get(
        `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&category=${category}&order=market_cap_desc&per_page=250&page=1`
      );
      data.forEach((token) => allTokenIds.add(token.id));
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}:`,
        error.message
      );
    }
  }
  const uniqueTokenIds = Array.from(allTokenIds);
  console.log(
    `–ù–∞–π–¥–µ–Ω–æ ${uniqueTokenIds.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.`
  );

  // 2. –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ (—Ü–µ–Ω–∞, –æ–±—ä–µ–º) –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
  console.log("2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
  const marketData = await getMarketData(uniqueTokenIds);

  // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
  console.log("3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É...");
  await saveMarketData(marketData);

  // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
  console.log("4. –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...");
  for (const tokenData of marketData) {
    await analyzeToken(tokenData);
  }

  // 5. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  console.log("5. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
  await cleanupOldData();
};

// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async function setupDatabase() {
  await pool.query(`
        CREATE TABLE IF NOT EXISTS token_market_data (
            id SERIAL PRIMARY KEY,
            coingecko_id TEXT NOT NULL,
            symbol TEXT NOT NULL,
            price_usd NUMERIC(20, 8),
            volume_24h_usd NUMERIC(25, 4),
            timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            UNIQUE(coingecko_id, timestamp)
        )
    `);
}

async function getMarketData(tokenIds) {
  const marketData = [];
  const batchSize = 250; // CoinGecko –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–æ 250 ID –∑–∞ —Ä–∞–∑
  for (let i = 0; i < tokenIds.length; i += batchSize) {
    const batch = tokenIds.slice(i, i + batchSize);
    try {
      const { data } = await axios.get(
        `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${batch.join(
          ","
        )}`
      );
      marketData.push(...data);
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞—Ç—á–∞:`,
        error.message
      );
    }
    await new Promise((res) => setTimeout(res, 1000)); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
  }
  return marketData;
}

async function saveMarketData(marketData) {
  for (const token of marketData) {
    if (token.id && token.current_price && token.total_volume) {
      await pool.query(
        `INSERT INTO token_market_data(coingecko_id, symbol, price_usd, volume_24h_usd) VALUES($1, $2, $3, $4)`,
        [
          token.id,
          token.symbol.toUpperCase(),
          token.current_price,
          token.total_volume,
        ]
      );
    }
  }
  console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${marketData.length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.`);
}

async function analyzeToken(currentTokenData) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    const { rows: history } = await pool.query(
      `SELECT price_usd, volume_24h_usd FROM token_market_data WHERE coingecko_id = $1 ORDER BY timestamp DESC LIMIT 100`, // –ë–µ—Ä–µ–º 100 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ TA
      [currentTokenData.id]
    );

    if (history.length < 2) {
      console.log(
        `–î–ª—è ${currentTokenData.symbol} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.`
      );
      return;
    }

    const currentPrice = parseFloat(history[0].price_usd);
    const previousPrice = parseFloat(history[1].price_usd);
    const currentVolume = parseFloat(history[0].volume_24h_usd);
    const previousVolume = parseFloat(history[1].volume_24h_usd);

    const priceChange = ((currentPrice - previousPrice) / previousPrice) * 100;
    const volumeChange =
      ((currentVolume - previousVolume) / previousVolume) * 100;

    // --- –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä ---
    if (
      priceChange >= CONFIG.priceChangeThreshold &&
      volumeChange >= CONFIG.volumeChangeThreshold
    ) {
      console.log(
        `[–ü–ï–†–í–ò–ß–ù–´–ô –°–ò–ì–ù–ê–õ] –¥–ª—è ${
          currentTokenData.symbol
        }: –†–æ—Å—Ç —Ü–µ–Ω—ã ${priceChange.toFixed(
          2
        )}%, –†–æ—Å—Ç –æ–±—ä–µ–º–∞ ${volumeChange.toFixed(2)}%`
      );

      // --- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ---
      const prices = history.map((row) => parseFloat(row.price_usd)).reverse(); // –ù—É–∂–µ–Ω –º–∞—Å—Å–∏–≤ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º

      const sma50 = SMA.calculate({ period: CONFIG.smaPeriod, values: prices });
      const ema20 = EMA.calculate({ period: CONFIG.emaPeriod, values: prices });
      const rsi = RSI.calculate({ period: CONFIG.rsiPeriod, values: prices });

      const lastSma50 = sma50[sma50.length - 1];
      const lastEma20 = ema20[ema20.length - 1];
      const lastRsi = rsi[rsi.length - 1];

      console.log(
        `[TA-–î–ê–ù–ù–´–ï] –¥–ª—è ${
          currentTokenData.symbol
        }: –¶–µ–Ω–∞=${currentPrice.toFixed(4)}, SMA50=${lastSma50.toFixed(
          4
        )}, EMA20=${lastEma20.toFixed(4)}, RSI=${lastRsi.toFixed(2)}`
      );

      // --- –í–ê–®–ê –õ–û–ì–ò–ö–ê –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–ô ---
      // –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ —É –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è.
      // –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.
      // –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –∫–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–æ–º –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.
      // –í–∞–º –Ω—É–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–¥ —Å–µ–±—è.
      
            const smaCrossover = currentPrice > lastSma50;
            const emaCrossover = currentPrice > lastEma20;
            const rsiInRange = lastRsi > 40 && lastRsi < 70;

            if ((smaCrossover || emaCrossover) && rsiInRange) {
                console.log(`[!!!] –ü–û–õ–ù–´–ô –°–ò–ì–ù–ê–õ –¥–ª—è ${currentTokenData.symbol}. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...`);
                const message = `
                üìà **–°–∏–≥–Ω–∞–ª –ø–æ —Ç–æ–∫–µ–Ω—É: ${currentTokenData.symbol.toUpperCase()}**
                -----------------------------------
                **–¶–µ–Ω–∞:** $${currentPrice.toFixed(4)}
                **–†–æ—Å—Ç —Ü–µ–Ω—ã (15 –º–∏–Ω):** ${priceChange.toFixed(2)}%
                **–†–æ—Å—Ç –æ–±—ä–µ–º–∞ (15 –º–∏–Ω):** ${volumeChange.toFixed(2)}%
                -----------------------------------
                **SMA50:** ${lastSma50.toFixed(4)} (–ø—Ä–æ–±–∏—Ç: ${smaCrossover})
                **EMA20:** ${lastEma20.toFixed(4)} (–ø—Ä–æ–±–∏—Ç: ${emaCrossover})
                **RSI:** ${lastRsi.toFixed(2)}
                `;
                await sendTelegramMessage(message);
            } else {
                console.log(`[INFO] –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è ${currentTokenData.symbol} —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ –¢–ê –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.`);
            }
            
    }
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞ ${currentTokenData.symbol}:`,
      error.message
    );
  }
}

async function cleanupOldData() {
  await pool.query(
    `DELETE FROM token_market_data WHERE timestamp < NOW() - INTERVAL '${CONFIG.dbCleanupHours} hours'`
  );
  console.log("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
}

async function sendTelegramMessage(text) {
  const { botToken, chatId } = CONFIG.telegram;
  if (!botToken || !chatId) {
    console.warn("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.");
    return;
  }
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  try {
    await axios.post(url, { chat_id: chatId, text, parse_mode: "Markdown" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error.message);
  }
}

// --- –ó–∞–ø—É—Å–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ---
runScanner()
  .then(() => console.log("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."))
  .catch((e) => console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞:", e))
  .finally(() => {
    pool.end();
    console.log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.");
  });
