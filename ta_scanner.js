const { Pool } = require('pg');
const axios = require('axios');
const { Telegraf } = require('telegraf');
const { SMA, EMA, RSI } = require('technicalindicators');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
// –ó–Ω–∞—á–µ–Ω–∏—è –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway
const DATABASE_URL = process.env.DATABASE_URL;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID; // –ù–∞–ø—Ä–∏–º–µ—Ä: '@your_public_channel_name'

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!DATABASE_URL || !TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.error("–û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (DATABASE_URL, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)");
    process.exit(1);
}

// –°–µ—Ç–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å–æ–≥–ª–∞—Å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º CoinGecko)
const NETWORKS = {
    'Ethereum': 'ethereum-ecosystem',
    'BSC': 'binance-smart-chain',
    'Solana': 'solana-ecosystem'
};

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
const PRICE_INCREASE_THRESHOLD = 3.0;  // –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
const VOLUME_INCREASE_THRESHOLD = 15.0; // –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
const RSI_MIN = 40;
const RSI_MAX = 70;
const HISTORICAL_DAYS = 90; // –î–Ω–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö. –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const dbPool = new Pool({ connectionString: DATABASE_URL });
const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

// --- –ë–ê–ó–ê –î–ê–ù–ù–´–• ---

async function setupDatabase() {
    const client = await dbPool.connect();
    try {
        await client.query(`
            CREATE TABLE IF NOT EXISTS coin_data (
                id SERIAL PRIMARY KEY,
                coin_id VARCHAR(100) NOT NULL,
                network VARCHAR(50) NOT NULL,
                price DOUBLE PRECISION NOT NULL,
                volume DOUBLE PRECISION NOT NULL,
                timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW()
            );
        `);
        await client.query(`
            CREATE INDEX IF NOT EXISTS idx_coin_network_time 
            ON coin_data (coin_id, network, timestamp DESC);
        `);
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ë–î:", err);
    } finally {
        client.release();
    }
}

async function getPreviousData(coinId, network) {
    try {
        const res = await dbPool.query(`
            SELECT price, volume FROM coin_data
            WHERE coin_id = $1 AND network = $2
            ORDER BY timestamp DESC
            LIMIT 1;
        `, [coinId, network]);
        return res.rows[0];
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${coinId}:`, err);
        return null;
    }
}

async function insertData(coinId, network, price, volume) {
    try {
        await dbPool.query(`
            INSERT INTO coin_data (coin_id, network, price, volume)
            VALUES ($1, $2, $3, $4);
        `, [coinId, network, price, volume]);
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${coinId}:`, err);
    }
}

async function cleanupOldData() {
    try {
        const res = await dbPool.query("DELETE FROM coin_data WHERE timestamp < NOW() - INTERVAL '24 hours';");
        console.log(`–û—á–∏—â–µ–Ω–æ ${res.rowCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π.`);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", err);
    }
}

// --- API COINGECKO –ò –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó ---

async function getTopCoinsData(category) {
    const url = "https://api.coingecko.com/api/v3/coins/markets";
    const params = {
        vs_currency: 'usd',
        category: category,
        order: 'market_cap_desc',
        per_page: 250,
        page: 1,
        sparkline: 'false'
    };
    try {
        const response = await axios.get(url, { params });
        return response.data;
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ API CoinGecko –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –¥–ª—è ${category}:`, err.message);
        return [];
    }
}

async function getTechnicalIndicators(coinId) {
    const url = `https://api.coingecko.com/api/v3/coins/${coinId}/market_chart`;
    const params = { vs_currency: 'usd', days: HISTORICAL_DAYS, interval: 'daily' };
    try {
        const response = await axios.get(url, { params });
        const prices = response.data.prices.map(p => p[1]); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã

        if (prices.length < 50) return null; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SMA(50)

        const sma50 = SMA.calculate({ period: 50, values: prices }).pop();
        const ema20 = EMA.calculate({ period: 20, values: prices }).pop();
        const rsi14 = RSI.calculate({ period: 14, values: prices }).pop();

        return { sma50, ema20, rsi: rsi14 };
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ API CoinGecko –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${coinId}:`, err.message);
        return null;
    }
}

// --- –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –í TELEGRAM ---

function escapeMarkdown(text) {
    const chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
    return text.replace(new RegExp(`[${chars.join('\\')}]`, 'g'), '\\$&');
}

async function sendTelegramMessage(message) {
    try {
        await bot.telegram.sendMessage(TELEGRAM_CHAT_ID, message, { parse_mode: 'MarkdownV2' });
        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.");
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", err);
    }
}

const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---

async function main() {
    console.log(`[${new Date().toISOString()}] –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...`);
    
    await setupDatabase();

    for (const [networkName, category] of Object.entries(NETWORKS)) {
        console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–∏: ${networkName} ---`);
        const coinsData = await getTopCoinsData(category);
        if (!coinsData || coinsData.length === 0) continue;

        for (const coin of coinsData) {
            const { id: coinId, symbol, current_price: currentPrice, total_volume: currentVolume } = coin;

            if (!coinId || !currentPrice || !currentVolume) continue;
            
            const coinSymbol = symbol.toUpperCase();
            const previousData = await getPreviousData(coinId, networkName);

            if (previousData) {
                const { price: prevPrice, volume: prevVolume } = previousData;

                if (prevPrice > 0 && prevVolume > 0) {
                    const priceChange = ((currentPrice - prevPrice) / prevPrice) * 100;
                    const volumeChange = ((currentVolume - prevVolume) / prevVolume) * 100;

                    if (priceChange >= PRICE_INCREASE_THRESHOLD && volumeChange >= VOLUME_INCREASE_THRESHOLD) {
                        console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è ${coinSymbol}: –†–æ—Å—Ç —Ü–µ–Ω—ã ${priceChange.toFixed(2)}%, –†–æ—Å—Ç –æ–±—ä–µ–º–∞ ${volumeChange.toFixed(2)}%`);
                        
                        const indicators = await getTechnicalIndicators(coinId);
                        if (indicators) {
                            const { sma50, ema20, rsi } = indicators;
                            const priceAboveEma20 = currentPrice > ema20;
                            const priceAboveSma50 = currentPrice > sma50;
                            const rsiInRange = rsi >= RSI_MIN && rsi <= RSI_MAX;

                            if ((priceAboveEma20 || priceAboveSma50) && rsiInRange) {
                                const message = escapeMarkdown(
                                    `üöÄ *–°–∏–≥–Ω–∞–ª –ø–æ –º–æ–Ω–µ—Ç–µ: ${coinSymbol} (${networkName})*\n\n` +
                                    `üìà *–†–æ—Å—Ç —Ü–µ–Ω—ã:* ${priceChange.toFixed(2)}%\n` +
                                    `üìä *–†–æ—Å—Ç –æ–±—ä–µ–º–∞:* ${volumeChange.toFixed(2)}%\n\n` +
                                    `üîπ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* $${currentPrice.toLocaleString('en-US')}\n` +
                                    `üîπ *–û–±—ä–µ–º (24—á):* $${currentVolume.toLocaleString('en-US', { maximumFractionDigits: 0 })}\n` +
                                    `üîπ *RSI(14):* ${rsi.toFixed(2)}\n\n` +
                                    `‚úÖ –¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ EMA(20) –∏–ª–∏ SMA(50) –≤–≤–µ—Ä—Ö.`
                                );
                                await sendTelegramMessage(message);
                            }
                        }
                    }
                }
            }
            await insertData(coinId, networkName, currentPrice, currentVolume);
        }
        await sleep(10000); // –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–µ—Ç—è–º–∏
    }

    await cleanupOldData();
    console.log(`[${new Date().toISOString()}] –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.`);
}

// –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main().catch(err => {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:", err);
    process.exit(1);
});